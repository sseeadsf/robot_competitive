
AVRASM ver. 2.1.30  D:\Embedded\ATmega\thi_robot_new\bang_diem_atmega8\Debug\List\1.asm Sun Feb 04 12:39:19 2018

D:\Embedded\ATmega\thi_robot_new\bang_diem_atmega8\Debug\List\1.asm(1086): warning: Register r5 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem_atmega8\Debug\List\1.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem_atmega8\Debug\List\1.asm(1088): warning: Register r7 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem_atmega8\Debug\List\1.asm(1089): warning: Register r8 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem_atmega8\Debug\List\1.asm(1090): warning: Register r9 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem_atmega8\Debug\List\1.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem_atmega8\Debug\List\1.asm(1092): warning: Register r11 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem_atmega8\Debug\List\1.asm(1093): warning: Register r10 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem_atmega8\Debug\List\1.asm(1094): warning: Register r13 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem_atmega8\Debug\List\1.asm(1095): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Send_Add=R5
                 	.DEF _Receive_Add=R4
                 	.DEF _Salt_Add=R7
                 	.DEF _score=R8
                 	.DEF _score_msb=R9
                 	.DEF _milisecond=R6
                 	.DEF _second=R11
                 	.DEF _led=R10
                 	.DEF _redScore=R13
                 	.DEF _blueScore=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c02f      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 c1f5      	RJMP _timer2_interrupt
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c143      	RJMP _timer0_ovf_isr
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000013 c0b1
000014 ab64      	.DB  0xB1,0xC0,0x64,0xAB
000015 0000
000016 b401      	.DB  0x0,0x0,0x1,0xB4
000017 0000      	.DB  0x0,0x0
                 
                 _0x57:
000018 f0fe
000019 f9ed
00001a dbf3
00001b f0df      	.DB  0xFE,0xF0,0xED,0xF9,0xF3,0xDB,0xDF,0xF0
00001c fbff      	.DB  0xFF,0xFB
                 _0x58:
00001d 0001
00001e 0101
00001f 0100
000020 0101      	.DB  0x1,0x0,0x1,0x1,0x0,0x1,0x1,0x1
000021 0101      	.DB  0x1,0x1
                 _0x59:
D:\Embedded\ATmega\thi_robot_new\bang_diem_atmega8\Debug\List\1.asm(1137): warning: .cseg .db misalignment - padding zero byte
000022 0001      	.DB  0x1
                 
                 __GLOBAL_INI_TBL:
000023 000a      	.DW  0x0A
000024 0004      	.DW  0x04
000025 0026      	.DW  __REG_VARS*2
                 
000026 000a      	.DW  0x0A
000027 0160      	.DW  _number
000028 0030      	.DW  _0x57*2
                 
000029 000a      	.DW  0x0A
00002a 016a      	.DW  _numberA
00002b 003a      	.DW  _0x58*2
                 
00002c 0001      	.DW  0x01
00002d 0178      	.DW  _timeOut
00002e 0044      	.DW  _0x59*2
                 
                 _0xFFFFFFFF:
00002f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000030 94f8      	CLI
000031 27ee      	CLR  R30
000032 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000033 e0f1      	LDI  R31,1
000034 bffb      	OUT  GICR,R31
000035 bfeb      	OUT  GICR,R30
000036 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000037 e08d      	LDI  R24,(14-2)+1
000038 e0a2      	LDI  R26,2
000039 27bb      	CLR  R27
                 __CLEAR_REG:
00003a 93ed      	ST   X+,R30
00003b 958a      	DEC  R24
00003c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003e e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000040 93ed      	ST   X+,R30
000041 9701      	SBIW R24,1
000042 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000043 e4e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000044 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000045 9185      	LPM  R24,Z+
000046 9195      	LPM  R25,Z+
000047 9700      	SBIW R24,0
000048 f061      	BREQ __GLOBAL_INI_END
000049 91a5      	LPM  R26,Z+
00004a 91b5      	LPM  R27,Z+
00004b 9005      	LPM  R0,Z+
00004c 9015      	LPM  R1,Z+
00004d 01bf      	MOVW R22,R30
00004e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004f 9005      	LPM  R0,Z+
000050 920d      	ST   X+,R0
000051 9701      	SBIW R24,1
000052 f7e1      	BRNE __GLOBAL_INI_LOOP
000053 01fb      	MOVW R30,R22
000054 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000055 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000056 bfed      	OUT  SPL,R30
000057 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000058 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000059 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005a e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005b c1d6      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdbool.h>
                 ;
                 ;#define LED_SEG             PORTB
                 ;#define LED_A               PORTC.0
                 ;#define LED_TIME1           PORTD.7
                 ;#define LED_TIME2           PORTD.6
                 ;#define LED_TIME3           PORTD.5
                 ;#define LED_RED_SCORE1      PORTD.4
                 ;#define LED_RED_SCORE2      PORTB.6
                 ;#define LED_RED_SCORE3      PORTB.7
                 ;#define LED_BLUE_SCORE1     PORTD.1
                 ;#define LED_BLUE_SCORE2     PORTD.2
                 ;#define LED_BLUE_SCORE3     PORTD.3
                 ;
                 ;#define CE                  PORTD.0
                 ;#define CSN                 PORTC.1
                 ;#define SCK                 PORTC.5
                 ;#define MOSI                PORTC.2
                 ;#define MISO                PINC.4
                 ;#define IRQ                 PINC.3
                 ;char Send_Add = 0xC0, Receive_Add = 0xB1, Salt_Add = 0xAB;
                 ;int score;
                 ;#include "rf.c"
                 ;#define CONFIG      	0x00
                 ;#define EN_AA       	0x01
                 ;#define EN_RXADDR   	0x02
                 ;#define SETUP_AW    	0x03
                 ;#define SETUP_RETR  	0x04
                 ;#define RF_CH       	0x05
                 ;#define RF_SETUP    	0x06
                 ;#define STATUS  		0x07
                 ;#define OBSERVE_TX  	0x08
                 ;#define RPD          	0x09
                 ;#define RX_ADDR_P0  	0x0A
                 ;#define RX_ADDR_P1  	0x0B
                 ;#define RX_ADDR_P2  	0x0C
                 ;#define RX_ADDR_P3  	0x0D
                 ;#define RX_ADDR_P4  	0x0E
                 ;#define RX_ADDR_P5  	0x0F
                 ;#define TX_ADDR     	0x10
                 ;#define RX_PW_P0    	0x11
                 ;#define RX_PW_P1    	0x12
                 ;#define RX_PW_P2    	0x13
                 ;#define RX_PW_P3    	0x14
                 ;#define RX_PW_P4    	0x15
                 ;#define RX_PW_P5    	0x16
                 ;#define FIFO_STATUS 	0x17
                 ;#define DYNPD	    	0x1C
                 ;#define FEATURE	    	0x1D
                 ;
                 ;void SPI_Write(unsigned char Buff){
                 ; 0000 001B void SPI_Write(unsigned char Buff){
                 
                 	.CSEG
                 _SPI_Write:
                 ; .FSTART _SPI_Write
                 ;    unsigned char bit_ctr;
                 ;    for(bit_ctr=0;bit_ctr<8;bit_ctr++){
00005c 93aa      	ST   -Y,R26
00005d 931a      	ST   -Y,R17
                 ;	Buff -> Y+1
                 ;	bit_ctr -> R17
00005e e010      	LDI  R17,LOW(0)
                 _0x4:
00005f 3018      	CPI  R17,8
000060 f488      	BRSH _0x5
                 ;        MOSI = (Buff & 0x80);
000061 81e9      	LDD  R30,Y+1
000062 78e0      	ANDI R30,LOW(0x80)
000063 f411      	BRNE _0x6
000064 98aa      	CBI  0x15,2
000065 c001      	RJMP _0x7
                 _0x6:
000066 9aaa      	SBI  0x15,2
                 _0x7:
                 ;        delay_us(5);
000067 d214      	RCALL SUBOPT_0x0
                 ;        Buff = (Buff << 1);
000068 81e9      	LDD  R30,Y+1
000069 0fee      	LSL  R30
00006a 83e9      	STD  Y+1,R30
                 ;        SCK = 1;
00006b d214      	RCALL SUBOPT_0x1
                 ;        delay_us(5);
                 ;        Buff |= MISO;
00006c 81a9      	LDD  R26,Y+1
00006d 2bea      	OR   R30,R26
00006e 83e9      	STD  Y+1,R30
                 ;        SCK = 0;
00006f 98ad      	CBI  0x15,5
                 ;    }
000070 5f1f      	SUBI R17,-1
000071 cfed      	RJMP _0x4
                 _0x5:
                 ;}
000072 8118      	LDD  R17,Y+0
000073 c026      	RJMP _0x2020004
                 ; .FEND
                 ;
                 ;unsigned char SPI_Read(void){
                 _SPI_Read:
                 ; .FSTART _SPI_Read
                 ;    unsigned char Buff=0;
                 ;    unsigned char bit_ctr;
                 ;    for(bit_ctr=0;bit_ctr<8;bit_ctr++){
000074 d2f3      	RCALL __SAVELOCR2
                 ;	Buff -> R17
                 ;	bit_ctr -> R16
000075 e010      	LDI  R17,0
000076 e000      	LDI  R16,LOW(0)
                 _0xD:
000077 3008      	CPI  R16,8
000078 f438      	BRSH _0xE
                 ;        delay_us(5);
000079 d202      	RCALL SUBOPT_0x0
                 ;        Buff = (Buff << 1);
00007a 0f11      	LSL  R17
                 ;        SCK = 1;
00007b d204      	RCALL SUBOPT_0x1
                 ;        delay_us(5);
                 ;        Buff |= MISO;
00007c 2b1e      	OR   R17,R30
                 ;        SCK = 0;
00007d 98ad      	CBI  0x15,5
                 ;    }
00007e 5f0f      	SUBI R16,-1
00007f cff7      	RJMP _0xD
                 _0xE:
                 ;    return(Buff);
000080 2fe1      	MOV  R30,R17
000081 9109      	LD   R16,Y+
000082 9119      	LD   R17,Y+
000083 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;void RF_Command(unsigned char command){
                 _RF_Command:
                 ; .FSTART _RF_Command
                 ;    CSN=0;
000084 d201      	RCALL SUBOPT_0x2
                 ;	command -> Y+0
                 ;    SPI_Write(command);
000085 d203      	RCALL SUBOPT_0x3
                 ;    CSN=1;
000086 d204      	RCALL SUBOPT_0x4
                 ;    delay_us(10);
                 ;}
000087 c066      	RJMP _0x2020002
                 ; .FEND
                 ;
                 ;
                 ;void RF_Write(unsigned char Reg_Add, unsigned char Value){
                 _RF_Write:
                 ; .FSTART _RF_Write
                 ;    CSN=0;
000088 d1fd      	RCALL SUBOPT_0x2
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_Write(0b00100000|Reg_Add);
000089 81e9      	LDD  R30,Y+1
00008a 62e0      	ORI  R30,0x20
00008b 2fae      	MOV  R26,R30
00008c c00a      	RJMP _0x2020003
                 ;    SPI_Write(Value);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;}
                 ; .FEND
                 ;
                 ;void RF_Write_Add(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
                 ;{
                 _RF_Write_Add:
                 ; .FSTART _RF_Write_Add
                 ;    CSN=0;
00008d d1f8      	RCALL SUBOPT_0x2
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_Write(0b00100000|Reg_Add);
00008e 81e9      	LDD  R30,Y+1
00008f 62e0      	ORI  R30,0x20
000090 2fae      	MOV  R26,R30
000091 dfca      	RCALL _SPI_Write
                 ;    SPI_Write(Salt_Add);
000092 2da7      	MOV  R26,R7
000093 dfc8      	RCALL _SPI_Write
                 ;    SPI_Write(Value);
000094 d1f4      	RCALL SUBOPT_0x3
                 ;    SPI_Write(Value);
000095 d1f3      	RCALL SUBOPT_0x3
                 ;    SPI_Write(Value);
000096 81a8      	LD   R26,Y
                 _0x2020003:
000097 dfc4      	RCALL _SPI_Write
                 ;    SPI_Write(Value);
000098 d1f0      	RCALL SUBOPT_0x3
                 ;    CSN=1;
000099 d1f1      	RCALL SUBOPT_0x4
                 ;    delay_us(10);
                 ;}
                 _0x2020004:
00009a 9622      	ADIW R28,2
00009b 9508      	RET
                 ; .FEND
                 ;
                 ;void TX_Address(unsigned char Address){
                 ;    CSN=0;
                 ;	Address -> Y+0
                 ;    RF_Write(SETUP_AW,0b00000011);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    //RF_Write_Add(RX_ADDR_P0, Address);
                 ;    RF_Write_Add(TX_ADDR, Address);
                 ;}
                 ;
                 ;void RX_Address(unsigned char Address){
                 _RX_Address:
                 ; .FSTART _RX_Address
                 ;    CSN=0;
00009c d1e9      	RCALL SUBOPT_0x2
                 ;	Address -> Y+0
                 ;    RF_Write(SETUP_AW,0b00000011);
00009d e0e3      	LDI  R30,LOW(3)
00009e 93ea      	ST   -Y,R30
00009f e0a3      	LDI  R26,LOW(3)
0000a0 dfe7      	RCALL _RF_Write
                 ;    CSN=1;
0000a1 d1e9      	RCALL SUBOPT_0x4
                 ;    delay_us(10);
                 ;    CSN=0;
0000a2 98a9      	CBI  0x15,1
                 ;    RF_Write_Add(RX_ADDR_P0, Address);
0000a3 e0ea      	LDI  R30,LOW(10)
0000a4 93ea      	ST   -Y,R30
0000a5 81a9      	LDD  R26,Y+1
0000a6 dfe6      	RCALL _RF_Write_Add
                 ;    //RF_Write_Add(RX_PW_P0, Address);
                 ;}
0000a7 c046      	RJMP _0x2020002
                 ; .FEND
                 ;
                 ;
                 ;void Common_Config(){
                 _Common_Config:
                 ; .FSTART _Common_Config
                 ;    CE=0;
0000a8 9890      	CBI  0x12,0
                 ;    CSN=1;
0000a9 9aa9      	SBI  0x15,1
                 ;    SCK=0;
0000aa 98ad      	CBI  0x15,5
                 ;    delay_us(10);
0000ab d1e4      	RCALL SUBOPT_0x5
                 ;    RF_Write(STATUS,0b01111110);
0000ac d1e7      	RCALL SUBOPT_0x6
                 ;    RF_Command(0b11100010);
0000ad eea2      	LDI  R26,LOW(226)
0000ae dfd5      	RCALL _RF_Command
                 ;    RF_Write(CONFIG,0b00011111);
0000af d1e8      	RCALL SUBOPT_0x7
                 ;    delay_ms(2);
0000b0 e0a2      	LDI  R26,LOW(2)
0000b1 e0b0      	LDI  R27,0
0000b2 d273      	RCALL _delay_ms
                 ;    RF_Write(STATUS,0b01111110);
0000b3 d1e0      	RCALL SUBOPT_0x6
                 ;    RF_Write(FEATURE, 0b00000100);
0000b4 e1ed      	LDI  R30,LOW(29)
0000b5 93ea      	ST   -Y,R30
0000b6 e0a4      	LDI  R26,LOW(4)
0000b7 dfd0      	RCALL _RF_Write
                 ;    RF_Write(RF_CH,0b00000010);
0000b8 e0e5      	LDI  R30,LOW(5)
0000b9 93ea      	ST   -Y,R30
0000ba e0a2      	LDI  R26,LOW(2)
0000bb dfcc      	RCALL _RF_Write
                 ;	RF_Write(0x11,0b00000001);
0000bc e1e1      	LDI  R30,LOW(17)
0000bd d1de      	RCALL SUBOPT_0x8
                 ;    RF_Write(RF_SETUP, 0b00000110);
0000be e0e6      	LDI  R30,LOW(6)
0000bf 93ea      	ST   -Y,R30
0000c0 e0a6      	LDI  R26,LOW(6)
0000c1 dfc6      	RCALL _RF_Write
                 ;    RF_Write(DYNPD,0b00000001);
0000c2 e1ec      	LDI  R30,LOW(28)
0000c3 d1d8      	RCALL SUBOPT_0x8
                 ;    RF_Write(EN_RXADDR,0b00000001);
0000c4 e0e2      	LDI  R30,LOW(2)
0000c5 d1d6      	RCALL SUBOPT_0x8
                 ;}
0000c6 9508      	RET
                 ; .FEND
                 ;
                 ;void Common_Init(){
                 _Common_Init:
                 ; .FSTART _Common_Init
                 ;    CE=1;
0000c7 9a90      	SBI  0x12,0
                 ;    delay_us(700);
                +
0000c8 e788     +LDI R24 , LOW ( 1400 )
0000c9 e095     +LDI R25 , HIGH ( 1400 )
                +__DELAY_USW_LOOP :
0000ca 9701     +SBIW R24 , 1
0000cb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1400
                 ;    CE=0;
0000cc 9890      	CBI  0x12,0
                 ;    CSN=1;
0000cd 9aa9      	SBI  0x15,1
                 ;}
0000ce 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void TX_Mode(){
                 ;    CE=0;
                 ;    RF_Write(CONFIG,0b00011110);
                 ;}
                 ;
                 ;void RX_Mode(){
                 _RX_Mode:
                 ; .FSTART _RX_Mode
                 ;    RF_Write(CONFIG,0b00011111);
0000cf d1c8      	RCALL SUBOPT_0x7
                 ;    CE=1;
0000d0 9a90      	SBI  0x12,0
                 ;}
0000d1 9508      	RET
                 ; .FEND
                 ;
                 ;void TX_Config(){
                 ;    RF_Write(STATUS,0b01111110);
                 ;    RF_Command(0b11100010);
                 ;    TX_Address(Send_Add);
                 ;}
                 ;
                 ;void RX_Config(){
                 _RX_Config:
                 ; .FSTART _RX_Config
                 ;    RF_Write(STATUS,0b01111110);
0000d2 d1c1      	RCALL SUBOPT_0x6
                 ;    RF_Command(0b11100010);
0000d3 eea2      	LDI  R26,LOW(226)
0000d4 dfaf      	RCALL _RF_Command
                 ;    RX_Address(Receive_Add);
0000d5 2da4      	MOV  R26,R4
0000d6 dfc5      	RCALL _RX_Address
                 ;}
0000d7 9508      	RET
                 ; .FEND
                 ;
                 ;void clear(){
                 ;    CSN=0;//nghe lenh
                 ;    delay_us(10);
                 ;	RF_Write(STATUS,0x70);
                 ;    RF_Write(CONFIG,0b00011110);
                 ;	delay_us(10);
                 ;    RF_Write(CONFIG,0b00011110);
                 ;    CSN=1;
                 ;    delay_ms(10);
                 ;}
                 ;
                 ;void TX_Send(){
                 ;    TX_Address(Send_Add);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_Write(0b11100001);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_Write(0b10100000);
                 ;    SPI_Write(score);
                 ;    CSN=1;
                 ;    CE=1;
                 ;    delay_us(500);
                 ;    CE=0;
                 ;    RF_Write(0x07,0b01111110);
                 ;    TX_Address(Send_Add);
                 ;    RF_Command(0b11100001);
                 ;}
                 ;
                 ;void RX_Read(){
                 _RX_Read:
                 ; .FSTART _RX_Read
                 ;    CE=0;
0000d8 9890      	CBI  0x12,0
                 ;    CSN=1;
0000d9 d1b1      	RCALL SUBOPT_0x4
                 ;    delay_us(10);
                 ;    CSN=0;
0000da 98a9      	CBI  0x15,1
                 ;    SPI_Write(0b01100001);
0000db e6a1      	LDI  R26,LOW(97)
0000dc df7f      	RCALL _SPI_Write
                 ;    delay_us(10);
0000dd d1b2      	RCALL SUBOPT_0x5
                 ;    score = SPI_Read();
0000de df95      	RCALL _SPI_Read
0000df 2e8e      	MOV  R8,R30
0000e0 2499      	CLR  R9
                 ;    CSN=1;
0000e1 9aa9      	SBI  0x15,1
                 ;    CE=1;
0000e2 9a90      	SBI  0x12,0
                 ;    RF_Write(STATUS,0b01111110);
0000e3 d1b0      	RCALL SUBOPT_0x6
                 ;    RF_Command(0b11100010);
0000e4 eea2      	LDI  R26,LOW(226)
0000e5 df9e      	RCALL _RF_Command
                 ;}
0000e6 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char number[10] = {0xFE, 0xF0, 0xED, 0xF9, 0xF3, 0xDB, 0xDF, 0xF0, 0xFF, 0xFB};
                 
                 	.DSEG
                 ;unsigned char numberA[10] = {1, 0, 1, 1, 0, 1, 1, 1, 1, 1};
                 ;unsigned char milisecond = 100, second = 180;
                 ;unsigned char led = 1;
                 ;unsigned char redScore = 0b0000;
                 ;unsigned char blueScore = 0b0000;
                 ;int redScores = 0, blueScores = 0;
                 ;bool timeOut = true;
                 ;int a;
                 ;
                 ;bool checkFinish(unsigned char input){
                 ; 0000 0027 _Bool checkFinish(unsigned char input){
                 
                 	.CSEG
                 _checkFinish:
                 ; .FSTART _checkFinish
                 ; 0000 0028     if(input == 0b1111)
0000e7 93aa      	ST   -Y,R26
                 ;	input -> Y+0
0000e8 81a8      	LD   R26,Y
0000e9 30af      	CPI  R26,LOW(0xF)
0000ea f411      	BRNE _0x5A
                 ; 0000 0029         return true;
0000eb e0e1      	LDI  R30,LOW(1)
0000ec c001      	RJMP _0x2020002
                 ; 0000 002A     else
                 _0x5A:
                 ; 0000 002B         return false;
0000ed e0e0      	LDI  R30,LOW(0)
                 ; 0000 002C }
                 _0x2020002:
0000ee 9621      	ADIW R28,1
0000ef 9508      	RET
                 ; .FEND
                 ;
                 ;void getScore(){
                 ; 0000 002E void getScore(){
                 _getScore:
                 ; .FSTART _getScore
                 ; 0000 002F     if(score == 1){
0000f0 e0e1      	LDI  R30,LOW(1)
0000f1 e0f0      	LDI  R31,HIGH(1)
0000f2 d1ac      	RCALL SUBOPT_0x9
0000f3 f431      	BRNE _0x5C
                 ; 0000 0030         blueScores += 2;
0000f4 d1ad      	RCALL SUBOPT_0xA
0000f5 9632      	ADIW R30,2
0000f6 d1b0      	RCALL SUBOPT_0xB
                 ; 0000 0031         blueScore |= 0b0001;
0000f7 e0e1      	LDI  R30,LOW(1)
0000f8 2ace      	OR   R12,R30
                 ; 0000 0032     }
                 ; 0000 0033     else if(score == 2){
0000f9 c042      	RJMP _0x5D
                 _0x5C:
0000fa e0e2      	LDI  R30,LOW(2)
0000fb e0f0      	LDI  R31,HIGH(2)
0000fc d1a2      	RCALL SUBOPT_0x9
0000fd f431      	BRNE _0x5E
                 ; 0000 0034         blueScores += 3;
0000fe d1a3      	RCALL SUBOPT_0xA
0000ff 9633      	ADIW R30,3
000100 d1a6      	RCALL SUBOPT_0xB
                 ; 0000 0035         blueScore |= 0b0010;
000101 e0e2      	LDI  R30,LOW(2)
000102 2ace      	OR   R12,R30
                 ; 0000 0036     }
                 ; 0000 0037     else if(score == 3){
000103 c038      	RJMP _0x5F
                 _0x5E:
000104 e0e3      	LDI  R30,LOW(3)
000105 e0f0      	LDI  R31,HIGH(3)
000106 d198      	RCALL SUBOPT_0x9
000107 f431      	BRNE _0x60
                 ; 0000 0038         blueScores += 5;
000108 d199      	RCALL SUBOPT_0xA
000109 9635      	ADIW R30,5
00010a d19c      	RCALL SUBOPT_0xB
                 ; 0000 0039         blueScore |= 0b0100;
00010b e0e4      	LDI  R30,LOW(4)
00010c 2ace      	OR   R12,R30
                 ; 0000 003A     }
                 ; 0000 003B     else if(score == 4){
00010d c02e      	RJMP _0x61
                 _0x60:
00010e e0e4      	LDI  R30,LOW(4)
00010f e0f0      	LDI  R31,HIGH(4)
000110 d18e      	RCALL SUBOPT_0x9
000111 f431      	BRNE _0x62
                 ; 0000 003C         blueScores += 10;
000112 d18f      	RCALL SUBOPT_0xA
000113 963a      	ADIW R30,10
000114 d192      	RCALL SUBOPT_0xB
                 ; 0000 003D         blueScore |= 0b1000;
000115 e0e8      	LDI  R30,LOW(8)
000116 2ace      	OR   R12,R30
                 ; 0000 003E     }
                 ; 0000 003F     else if(score == 5){
000117 c024      	RJMP _0x63
                 _0x62:
000118 e0e5      	LDI  R30,LOW(5)
000119 e0f0      	LDI  R31,HIGH(5)
00011a d184      	RCALL SUBOPT_0x9
00011b f429      	BRNE _0x64
                 ; 0000 0040         redScores += 2;
00011c d18f      	RCALL SUBOPT_0xC
00011d 9632      	ADIW R30,2
00011e d192      	RCALL SUBOPT_0xD
                 ; 0000 0041         redScore |= 0b0001;
00011f e0e1      	LDI  R30,LOW(1)
000120 c01a      	RJMP _0x141
                 ; 0000 0042     }
                 ; 0000 0043     else if(score == 6){
                 _0x64:
000121 e0e6      	LDI  R30,LOW(6)
000122 e0f0      	LDI  R31,HIGH(6)
000123 d17b      	RCALL SUBOPT_0x9
000124 f429      	BRNE _0x66
                 ; 0000 0044         redScores += 3;
000125 d186      	RCALL SUBOPT_0xC
000126 9633      	ADIW R30,3
000127 d189      	RCALL SUBOPT_0xD
                 ; 0000 0045         redScore |= 0b0010;
000128 e0e2      	LDI  R30,LOW(2)
000129 c011      	RJMP _0x141
                 ; 0000 0046     }
                 ; 0000 0047     else if(score == 7){
                 _0x66:
00012a e0e7      	LDI  R30,LOW(7)
00012b e0f0      	LDI  R31,HIGH(7)
00012c d172      	RCALL SUBOPT_0x9
00012d f429      	BRNE _0x68
                 ; 0000 0048         redScores += 5;
00012e d17d      	RCALL SUBOPT_0xC
00012f 9635      	ADIW R30,5
000130 d180      	RCALL SUBOPT_0xD
                 ; 0000 0049         redScore |= 0b0100;
000131 e0e4      	LDI  R30,LOW(4)
000132 c008      	RJMP _0x141
                 ; 0000 004A     }
                 ; 0000 004B     else if(score == 8){
                 _0x68:
000133 e0e8      	LDI  R30,LOW(8)
000134 e0f0      	LDI  R31,HIGH(8)
000135 d169      	RCALL SUBOPT_0x9
000136 f429      	BRNE _0x6A
                 ; 0000 004C         redScores += 10;
000137 d174      	RCALL SUBOPT_0xC
000138 963a      	ADIW R30,10
000139 d177      	RCALL SUBOPT_0xD
                 ; 0000 004D         redScore |= 0b1000;
00013a e0e8      	LDI  R30,LOW(8)
                 _0x141:
00013b 2ade      	OR   R13,R30
                 ; 0000 004E     }
                 ; 0000 004F }
                 _0x6A:
                 _0x63:
                 _0x61:
                 _0x5F:
                 _0x5D:
00013c 9508      	RET
                 ; .FEND
                 ;
                 ;void stopGame(){
                 ; 0000 0051 void stopGame(){
                 _stopGame:
                 ; .FSTART _stopGame
                 ; 0000 0052     timeOut = true;
00013d e0e1      	LDI  R30,LOW(1)
00013e 93e0 0178 	STS  _timeOut,R30
                 ; 0000 0053     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (1<<TOIE0);
000140 e0e5      	LDI  R30,LOW(5)
000141 c004      	RJMP _0x2020001
                 ; 0000 0054 }
                 ; .FEND
                 ;
                 ;void startGame(){
                 ; 0000 0056 void startGame(){
                 _startGame:
                 ; .FSTART _startGame
                 ; 0000 0057     timeOut = false;
000142 e0e0      	LDI  R30,LOW(0)
000143 93e0 0178 	STS  _timeOut,R30
                 ; 0000 0058     TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (1<<TOIE0);
000145 e4e5      	LDI  R30,LOW(69)
                 _0x2020001:
000146 bfe9      	OUT  0x39,R30
                 ; 0000 0059 }
000147 9508      	RET
                 ; .FEND
                 ;
                 ;void resetGame(){
                 ; 0000 005B void resetGame(){
                 _resetGame:
                 ; .FSTART _resetGame
                 ; 0000 005C     WDTCR=0x18;
000148 e1e8      	LDI  R30,LOW(24)
000149 bde1      	OUT  0x21,R30
                 ; 0000 005D     WDTCR=0x08;
00014a e0e8      	LDI  R30,LOW(8)
00014b bde1      	OUT  0x21,R30
                 ; 0000 005E     while(1);
                 _0x6B:
00014c cfff      	RJMP _0x6B
                 ; 0000 005F }
                 ; .FEND
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void){
                 ; 0000 0061 interrupt [10] void timer0_ovf_isr(void){
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
00014d 920a      	ST   -Y,R0
00014e 921a      	ST   -Y,R1
00014f 939a      	ST   -Y,R25
000150 93aa      	ST   -Y,R26
000151 93ba      	ST   -Y,R27
000152 93ea      	ST   -Y,R30
000153 93fa      	ST   -Y,R31
000154 b7ef      	IN   R30,SREG
000155 93ea      	ST   -Y,R30
                 ; 0000 0062     TCNT0=0x45;
000156 e4e5      	LDI  R30,LOW(69)
000157 bfe2      	OUT  0x32,R30
                 ; 0000 0063     if(led == 1){
000158 e0e1      	LDI  R30,LOW(1)
000159 15ea      	CP   R30,R10
00015a f461      	BRNE _0x6E
                 ; 0000 0064         LED_SEG = number[second/100];
00015b d15a      	RCALL SUBOPT_0xE
00015c d15f      	RCALL SUBOPT_0xF
                 ; 0000 0065         LED_A = numberA[second/100];
00015d d158      	RCALL SUBOPT_0xE
00015e d162      	RCALL SUBOPT_0x10
00015f f411      	BRNE _0x6F
000160 98a8      	CBI  0x15,0
000161 c001      	RJMP _0x70
                 _0x6F:
000162 9aa8      	SBI  0x15,0
                 _0x70:
                 ; 0000 0066         LED_TIME1 =         0;
000163 9897      	CBI  0x12,7
                 ; 0000 0067         LED_TIME2 =         1;
000164 d161      	RCALL SUBOPT_0x11
                 ; 0000 0068         LED_TIME3 =         1;
                 ; 0000 0069         LED_RED_SCORE1 =    1;
000165 d163      	RCALL SUBOPT_0x12
                 ; 0000 006A         LED_RED_SCORE2 =    1;
                 ; 0000 006B         LED_RED_SCORE3 =    1;
                 ; 0000 006C         LED_BLUE_SCORE1 =   1;
                 ; 0000 006D         LED_BLUE_SCORE2 =   1;
                 ; 0000 006E         LED_BLUE_SCORE3 =   1;
                 ; 0000 006F 
                 ; 0000 0070     }
                 ; 0000 0071 
                 ; 0000 0072     else if(led == 2){
000166 c088      	RJMP _0x83
                 _0x6E:
000167 e0e2      	LDI  R30,LOW(2)
000168 15ea      	CP   R30,R10
000169 f469      	BRNE _0x84
                 ; 0000 0073         LED_SEG = number[(second%100)/10];
00016a d165      	RCALL SUBOPT_0x13
00016b d150      	RCALL SUBOPT_0xF
                 ; 0000 0074         LED_A = numberA[(second%100)/10];
00016c d163      	RCALL SUBOPT_0x13
00016d d153      	RCALL SUBOPT_0x10
00016e f411      	BRNE _0x85
00016f 98a8      	CBI  0x15,0
000170 c001      	RJMP _0x86
                 _0x85:
000171 9aa8      	SBI  0x15,0
                 _0x86:
                 ; 0000 0075         LED_TIME1 =         1;
000172 9a97      	SBI  0x12,7
                 ; 0000 0076         LED_TIME2 =         0;
000173 9896      	CBI  0x12,6
                 ; 0000 0077         LED_TIME3 =         1;
000174 9a95      	SBI  0x12,5
                 ; 0000 0078         LED_RED_SCORE1 =    1;
000175 d153      	RCALL SUBOPT_0x12
                 ; 0000 0079         LED_RED_SCORE2 =    1;
                 ; 0000 007A         LED_RED_SCORE3 =    1;
                 ; 0000 007B         LED_BLUE_SCORE1 =   1;
                 ; 0000 007C         LED_BLUE_SCORE2 =   1;
                 ; 0000 007D         LED_BLUE_SCORE3 =   1;
                 ; 0000 007E     }
                 ; 0000 007F 
                 ; 0000 0080     else if(led == 3){
000176 c078      	RJMP _0x99
                 _0x84:
000177 e0e3      	LDI  R30,LOW(3)
000178 15ea      	CP   R30,R10
000179 f469      	BRNE _0x9A
                 ; 0000 0081         LED_SEG = number[second%10];
00017a d15f      	RCALL SUBOPT_0x14
00017b d140      	RCALL SUBOPT_0xF
                 ; 0000 0082         LED_A = numberA[second%10];
00017c d15d      	RCALL SUBOPT_0x14
00017d d143      	RCALL SUBOPT_0x10
00017e f411      	BRNE _0x9B
00017f 98a8      	CBI  0x15,0
000180 c001      	RJMP _0x9C
                 _0x9B:
000181 9aa8      	SBI  0x15,0
                 _0x9C:
                 ; 0000 0083         LED_TIME1 =         1;
000182 9a97      	SBI  0x12,7
                 ; 0000 0084         LED_TIME2 =         1;
000183 9a96      	SBI  0x12,6
                 ; 0000 0085         LED_TIME3 =         0;
000184 9895      	CBI  0x12,5
                 ; 0000 0086         LED_RED_SCORE1 =    1;
000185 d143      	RCALL SUBOPT_0x12
                 ; 0000 0087         LED_RED_SCORE2 =    1;
                 ; 0000 0088         LED_RED_SCORE3 =    1;
                 ; 0000 0089         LED_BLUE_SCORE1 =   1;
                 ; 0000 008A         LED_BLUE_SCORE2 =   1;
                 ; 0000 008B         LED_BLUE_SCORE3 =   1;
                 ; 0000 008C     }
                 ; 0000 008D 
                 ; 0000 008E     else if(led == 4){
000186 c068      	RJMP _0xAF
                 _0x9A:
000187 e0e4      	LDI  R30,LOW(4)
000188 15ea      	CP   R30,R10
000189 f469      	BRNE _0xB0
                 ; 0000 008F         LED_SEG = number[redScores/100];
00018a d155      	RCALL SUBOPT_0x15
00018b d130      	RCALL SUBOPT_0xF
                 ; 0000 0090         LED_A = numberA[redScores/100];
00018c d153      	RCALL SUBOPT_0x15
00018d d133      	RCALL SUBOPT_0x10
00018e f411      	BRNE _0xB1
00018f 98a8      	CBI  0x15,0
000190 c001      	RJMP _0xB2
                 _0xB1:
000191 9aa8      	SBI  0x15,0
                 _0xB2:
                 ; 0000 0091         LED_TIME1 =         1;
000192 d155      	RCALL SUBOPT_0x16
                 ; 0000 0092         LED_TIME2 =         1;
                 ; 0000 0093         LED_TIME3 =         1;
                 ; 0000 0094         LED_RED_SCORE1 =    0;
000193 9894      	CBI  0x12,4
                 ; 0000 0095         LED_RED_SCORE2 =    1;
000194 d155      	RCALL SUBOPT_0x17
                 ; 0000 0096         LED_RED_SCORE3 =    1;
                 ; 0000 0097         LED_BLUE_SCORE1 =   1;
000195 d157      	RCALL SUBOPT_0x18
                 ; 0000 0098         LED_BLUE_SCORE2 =   1;
                 ; 0000 0099         LED_BLUE_SCORE3 =   1;
                 ; 0000 009A     }
                 ; 0000 009B 
                 ; 0000 009C     else if(led == 5){
000196 c058      	RJMP _0xC5
                 _0xB0:
000197 e0e5      	LDI  R30,LOW(5)
000198 15ea      	CP   R30,R10
000199 f471      	BRNE _0xC6
                 ; 0000 009D         LED_SEG = number[(redScores%100)/10];
00019a d156      	RCALL SUBOPT_0x19
00019b d120      	RCALL SUBOPT_0xF
                 ; 0000 009E         LED_A = numberA[(redScores%100)/10];
00019c d154      	RCALL SUBOPT_0x19
00019d d123      	RCALL SUBOPT_0x10
00019e f411      	BRNE _0xC7
00019f 98a8      	CBI  0x15,0
0001a0 c001      	RJMP _0xC8
                 _0xC7:
0001a1 9aa8      	SBI  0x15,0
                 _0xC8:
                 ; 0000 009F         LED_TIME1 =         1;
0001a2 d145      	RCALL SUBOPT_0x16
                 ; 0000 00A0         LED_TIME2 =         1;
                 ; 0000 00A1         LED_TIME3 =         1;
                 ; 0000 00A2         LED_RED_SCORE1 =    1;
0001a3 9a94      	SBI  0x12,4
                 ; 0000 00A3         LED_RED_SCORE2 =    0;
0001a4 98c6      	CBI  0x18,6
                 ; 0000 00A4         LED_RED_SCORE3 =    1;
0001a5 9ac7      	SBI  0x18,7
                 ; 0000 00A5         LED_BLUE_SCORE1 =   1;
0001a6 d146      	RCALL SUBOPT_0x18
                 ; 0000 00A6         LED_BLUE_SCORE2 =   1;
                 ; 0000 00A7         LED_BLUE_SCORE3 =   1;
                 ; 0000 00A8     }
                 ; 0000 00A9 
                 ; 0000 00AA     else if(led == 6){
0001a7 c047      	RJMP _0xDB
                 _0xC6:
0001a8 e0e6      	LDI  R30,LOW(6)
0001a9 15ea      	CP   R30,R10
0001aa f471      	BRNE _0xDC
                 ; 0000 00AB         LED_SEG = number[redScores%10];
0001ab d151      	RCALL SUBOPT_0x1A
0001ac d10f      	RCALL SUBOPT_0xF
                 ; 0000 00AC         LED_A = numberA[redScores%10];
0001ad d14f      	RCALL SUBOPT_0x1A
0001ae d112      	RCALL SUBOPT_0x10
0001af f411      	BRNE _0xDD
0001b0 98a8      	CBI  0x15,0
0001b1 c001      	RJMP _0xDE
                 _0xDD:
0001b2 9aa8      	SBI  0x15,0
                 _0xDE:
                 ; 0000 00AD         LED_TIME1 =         1;
0001b3 d134      	RCALL SUBOPT_0x16
                 ; 0000 00AE         LED_TIME2 =         1;
                 ; 0000 00AF         LED_TIME3 =         1;
                 ; 0000 00B0         LED_RED_SCORE1 =    1;
0001b4 9a94      	SBI  0x12,4
                 ; 0000 00B1         LED_RED_SCORE2 =    1;
0001b5 9ac6      	SBI  0x18,6
                 ; 0000 00B2         LED_RED_SCORE3 =    0;
0001b6 98c7      	CBI  0x18,7
                 ; 0000 00B3         LED_BLUE_SCORE1 =   1;
0001b7 d135      	RCALL SUBOPT_0x18
                 ; 0000 00B4         LED_BLUE_SCORE2 =   1;
                 ; 0000 00B5         LED_BLUE_SCORE3 =   1;
                 ; 0000 00B6     }
                 ; 0000 00B7 
                 ; 0000 00B8     else if(led == 7){
0001b8 c036      	RJMP _0xF1
                 _0xDC:
0001b9 e0e7      	LDI  R30,LOW(7)
0001ba 15ea      	CP   R30,R10
0001bb f479      	BRNE _0xF2
                 ; 0000 00B9         LED_SEG = number[blueScores/100];
0001bc d148      	RCALL SUBOPT_0x1B
0001bd d0fe      	RCALL SUBOPT_0xF
                 ; 0000 00BA         LED_A = numberA[blueScores/100];
0001be d146      	RCALL SUBOPT_0x1B
0001bf d101      	RCALL SUBOPT_0x10
0001c0 f411      	BRNE _0xF3
0001c1 98a8      	CBI  0x15,0
0001c2 c001      	RJMP _0xF4
                 _0xF3:
0001c3 9aa8      	SBI  0x15,0
                 _0xF4:
                 ; 0000 00BB         LED_TIME1 =         1;
0001c4 d123      	RCALL SUBOPT_0x16
                 ; 0000 00BC         LED_TIME2 =         1;
                 ; 0000 00BD         LED_TIME3 =         1;
                 ; 0000 00BE         LED_RED_SCORE1 =    1;
0001c5 9a94      	SBI  0x12,4
                 ; 0000 00BF         LED_RED_SCORE2 =    1;
0001c6 d123      	RCALL SUBOPT_0x17
                 ; 0000 00C0         LED_RED_SCORE3 =    1;
                 ; 0000 00C1         LED_BLUE_SCORE1 =   0;
0001c7 9891      	CBI  0x12,1
                 ; 0000 00C2         LED_BLUE_SCORE2 =   1;
0001c8 9a92      	SBI  0x12,2
                 ; 0000 00C3         LED_BLUE_SCORE3 =   1;
0001c9 9a93      	SBI  0x12,3
                 ; 0000 00C4     }
                 ; 0000 00C5 
                 ; 0000 00C6     else if(led == 8){
0001ca c024      	RJMP _0x107
                 _0xF2:
0001cb e0e8      	LDI  R30,LOW(8)
0001cc 15ea      	CP   R30,R10
0001cd f479      	BRNE _0x108
                 ; 0000 00C7         LED_SEG = number[(blueScores%100)/10];
0001ce d13e      	RCALL SUBOPT_0x1C
0001cf d0ec      	RCALL SUBOPT_0xF
                 ; 0000 00C8         LED_A = numberA[(blueScores%100)/10];
0001d0 d13c      	RCALL SUBOPT_0x1C
0001d1 d0ef      	RCALL SUBOPT_0x10
0001d2 f411      	BRNE _0x109
0001d3 98a8      	CBI  0x15,0
0001d4 c001      	RJMP _0x10A
                 _0x109:
0001d5 9aa8      	SBI  0x15,0
                 _0x10A:
                 ; 0000 00C9         LED_TIME1 =         1;
0001d6 d111      	RCALL SUBOPT_0x16
                 ; 0000 00CA         LED_TIME2 =         1;
                 ; 0000 00CB         LED_TIME3 =         1;
                 ; 0000 00CC         LED_RED_SCORE1 =    1;
0001d7 9a94      	SBI  0x12,4
                 ; 0000 00CD         LED_RED_SCORE2 =    1;
0001d8 d111      	RCALL SUBOPT_0x17
                 ; 0000 00CE         LED_RED_SCORE3 =    1;
                 ; 0000 00CF         LED_BLUE_SCORE1 =   1;
0001d9 9a91      	SBI  0x12,1
                 ; 0000 00D0         LED_BLUE_SCORE2 =   0;
0001da 9892      	CBI  0x12,2
                 ; 0000 00D1         LED_BLUE_SCORE3 =   1;
0001db 9a93      	SBI  0x12,3
                 ; 0000 00D2     }
                 ; 0000 00D3 
                 ; 0000 00D4     else if(led == 9){
0001dc c012      	RJMP _0x11D
                 _0x108:
0001dd e0e9      	LDI  R30,LOW(9)
0001de 15ea      	CP   R30,R10
0001df f479      	BRNE _0x11E
                 ; 0000 00D5         LED_SEG = number[blueScores%10];
0001e0 d138      	RCALL SUBOPT_0x1D
0001e1 d0da      	RCALL SUBOPT_0xF
                 ; 0000 00D6         LED_A = numberA[blueScores%10];
0001e2 d136      	RCALL SUBOPT_0x1D
0001e3 d0dd      	RCALL SUBOPT_0x10
0001e4 f411      	BRNE _0x11F
0001e5 98a8      	CBI  0x15,0
0001e6 c001      	RJMP _0x120
                 _0x11F:
0001e7 9aa8      	SBI  0x15,0
                 _0x120:
                 ; 0000 00D7         LED_TIME1 =         1;
0001e8 d0ff      	RCALL SUBOPT_0x16
                 ; 0000 00D8         LED_TIME2 =         1;
                 ; 0000 00D9         LED_TIME3 =         1;
                 ; 0000 00DA         LED_RED_SCORE1 =    1;
0001e9 9a94      	SBI  0x12,4
                 ; 0000 00DB         LED_RED_SCORE2 =    1;
0001ea d0ff      	RCALL SUBOPT_0x17
                 ; 0000 00DC         LED_RED_SCORE3 =    1;
                 ; 0000 00DD         LED_BLUE_SCORE1 =   1;
0001eb 9a91      	SBI  0x12,1
                 ; 0000 00DE         LED_BLUE_SCORE2 =   1;
0001ec 9a92      	SBI  0x12,2
                 ; 0000 00DF         LED_BLUE_SCORE3 =   0;
0001ed 9893      	CBI  0x12,3
                 ; 0000 00E0         led = 0;
0001ee 24aa      	CLR  R10
                 ; 0000 00E1     }
                 ; 0000 00E2 
                 ; 0000 00E3     led++;
                 _0x11E:
                 _0x11D:
                 _0x107:
                 _0xF1:
                 _0xDB:
                 _0xC5:
                 _0xAF:
                 _0x99:
                 _0x83:
0001ef 94a3      	INC  R10
                 ; 0000 00E4 }
0001f0 91e9      	LD   R30,Y+
0001f1 bfef      	OUT  SREG,R30
0001f2 91f9      	LD   R31,Y+
0001f3 91e9      	LD   R30,Y+
0001f4 91b9      	LD   R27,Y+
0001f5 91a9      	LD   R26,Y+
0001f6 9199      	LD   R25,Y+
0001f7 9019      	LD   R1,Y+
0001f8 9009      	LD   R0,Y+
0001f9 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM2_OVF] void timer2_interrupt(){
                 ; 0000 00E6 interrupt [5] void timer2_interrupt(){
                 _timer2_interrupt:
                 ; .FSTART _timer2_interrupt
0001fa 920a      	ST   -Y,R0
0001fb 921a      	ST   -Y,R1
0001fc 92fa      	ST   -Y,R15
0001fd 936a      	ST   -Y,R22
0001fe 937a      	ST   -Y,R23
0001ff 938a      	ST   -Y,R24
000200 939a      	ST   -Y,R25
000201 93aa      	ST   -Y,R26
000202 93ba      	ST   -Y,R27
000203 93ea      	ST   -Y,R30
000204 93fa      	ST   -Y,R31
000205 b7ef      	IN   R30,SREG
000206 93ea      	ST   -Y,R30
                 ; 0000 00E7     TCNT2 = 0xB2;
000207 ebe2      	LDI  R30,LOW(178)
000208 bde4      	OUT  0x24,R30
                 ; 0000 00E8     milisecond--;
000209 946a      	DEC  R6
                 ; 0000 00E9     a++;
00020a e7a9      	LDI  R26,LOW(_a)
00020b e0b1      	LDI  R27,HIGH(_a)
00020c 91ed      	LD   R30,X+
00020d 91fd      	LD   R31,X+
00020e 9631      	ADIW R30,1
00020f 93fe      	ST   -X,R31
000210 93ee      	ST   -X,R30
                 ; 0000 00EA     if(a == 40)
000211 91a0 0179 	LDS  R26,_a
000213 91b0 017a 	LDS  R27,_a+1
000215 9798      	SBIW R26,40
000216 f429      	BRNE _0x133
                 ; 0000 00EB         a = 0;
000217 e0e0      	LDI  R30,LOW(0)
000218 93e0 0179 	STS  _a,R30
00021a 93e0 017a 	STS  _a+1,R30
                 ; 0000 00EC 
                 ; 0000 00ED     if(milisecond == 0){
                 _0x133:
00021c 2066      	TST  R6
00021d f419      	BRNE _0x134
                 ; 0000 00EE         second--;
00021e 94ba      	DEC  R11
                 ; 0000 00EF         milisecond = 100;
00021f e6e4      	LDI  R30,LOW(100)
000220 2e6e      	MOV  R6,R30
                 ; 0000 00F0     }
                 ; 0000 00F1     if(second == 0){
                 _0x134:
000221 20bb      	TST  R11
000222 f409      	BRNE _0x135
                 ; 0000 00F2         stopGame();
000223 df19      	RCALL _stopGame
                 ; 0000 00F3     }
                 ; 0000 00F4 }
                 _0x135:
000224 91e9      	LD   R30,Y+
000225 bfef      	OUT  SREG,R30
000226 91f9      	LD   R31,Y+
000227 91e9      	LD   R30,Y+
000228 91b9      	LD   R27,Y+
000229 91a9      	LD   R26,Y+
00022a 9199      	LD   R25,Y+
00022b 9189      	LD   R24,Y+
00022c 9179      	LD   R23,Y+
00022d 9169      	LD   R22,Y+
00022e 90f9      	LD   R15,Y+
00022f 9019      	LD   R1,Y+
000230 9009      	LD   R0,Y+
000231 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void){
                 ; 0000 00F6 void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 00F7 
                 ; 0000 00F8 DDRB = 0xFF;
000232 efef      	LDI  R30,LOW(255)
000233 bbe7      	OUT  0x17,R30
                 ; 0000 00F9 PORTB= 0x00;
000234 e0e0      	LDI  R30,LOW(0)
000235 bbe8      	OUT  0x18,R30
                 ; 0000 00FA 
                 ; 0000 00FB DDRD = 0xFF;
000236 efef      	LDI  R30,LOW(255)
000237 bbe1      	OUT  0x11,R30
                 ; 0000 00FC PORTD= 0xFF;
000238 bbe2      	OUT  0x12,R30
                 ; 0000 00FD 
                 ; 0000 00FE DDRC = 0x27;
000239 e2e7      	LDI  R30,LOW(39)
00023a bbe4      	OUT  0x14,R30
                 ; 0000 00FF PORTC = 0x00;
00023b e0e0      	LDI  R30,LOW(0)
00023c bbe5      	OUT  0x15,R30
                 ; 0000 0100 
                 ; 0000 0101 //2.912ms
                 ; 0000 0102 TCCR0=(0<<CS02) | (1<<CS01) | (1<<CS00);
00023d e0e3      	LDI  R30,LOW(3)
00023e bfe3      	OUT  0x33,R30
                 ; 0000 0103 TCNT0=0x45;
00023f e4e5      	LDI  R30,LOW(69)
000240 bfe2      	OUT  0x32,R30
                 ; 0000 0104 
                 ; 0000 0105 
                 ; 0000 0106 //10ms
                 ; 0000 0107 ASSR=0<<AS2;
000241 e0e0      	LDI  R30,LOW(0)
000242 bde2      	OUT  0x22,R30
                 ; 0000 0108 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
000243 e0e7      	LDI  R30,LOW(7)
000244 bde5      	OUT  0x25,R30
                 ; 0000 0109 TCNT2=0xB2;
000245 ebe2      	LDI  R30,LOW(178)
000246 bde4      	OUT  0x24,R30
                 ; 0000 010A OCR2=0x00;
000247 e0e0      	LDI  R30,LOW(0)
000248 bde3      	OUT  0x23,R30
                 ; 0000 010B 
                 ; 0000 010C 
                 ; 0000 010D TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
000249 e0e1      	LDI  R30,LOW(1)
00024a bfe9      	OUT  0x39,R30
                 ; 0000 010E 
                 ; 0000 010F #asm("sei")
00024b 9478      	sei
                 ; 0000 0110 
                 ; 0000 0111 Common_Config();
00024c de5b      	RCALL _Common_Config
                 ; 0000 0112 delay_us(10);
00024d d042      	RCALL SUBOPT_0x5
                 ; 0000 0113 Common_Init();
00024e de78      	RCALL _Common_Init
                 ; 0000 0114 delay_us(10);
00024f d040      	RCALL SUBOPT_0x5
                 ; 0000 0115 RX_Config();
000250 de81      	RCALL _RX_Config
                 ; 0000 0116 delay_us(10);
000251 d03e      	RCALL SUBOPT_0x5
                 ; 0000 0117 RX_Mode();
000252 de7c      	RCALL _RX_Mode
                 ; 0000 0118 
                 ; 0000 0119 
                 ; 0000 011A while (1){
                 _0x136:
                 ; 0000 011B     RX_Config();
000253 de7e      	RCALL _RX_Config
                 ; 0000 011C     if(IRQ == 0){
000254 999b      	SBIC 0x13,3
000255 c023      	RJMP _0x139
                 ; 0000 011D         RX_Read();
000256 de81      	RCALL _RX_Read
                 ; 0000 011E         if(score == 9)
000257 e0e9      	LDI  R30,LOW(9)
000258 e0f0      	LDI  R31,HIGH(9)
000259 d045      	RCALL SUBOPT_0x9
00025a f411      	BRNE _0x13A
                 ; 0000 011F             resetGame();
00025b deec      	RCALL _resetGame
                 ; 0000 0120         else if(score == 10){
00025c c006      	RJMP _0x13B
                 _0x13A:
00025d e0ea      	LDI  R30,LOW(10)
00025e e0f0      	LDI  R31,HIGH(10)
00025f d03f      	RCALL SUBOPT_0x9
000260 f411      	BRNE _0x13C
                 ; 0000 0121             startGame();
000261 dee0      	RCALL _startGame
                 ; 0000 0122             RX_Config();
000262 de6f      	RCALL _RX_Config
                 ; 0000 0123         }
                 ; 0000 0124         if(!timeOut){
                 _0x13C:
                 _0x13B:
000263 91e0 0178 	LDS  R30,_timeOut
000265 30e0      	CPI  R30,0
000266 f421      	BRNE _0x13D
                 ; 0000 0125             getScore();
000267 de88      	RCALL _getScore
                 ; 0000 0126             delay_ms(500);
000268 efa4      	LDI  R26,LOW(500)
000269 e0b1      	LDI  R27,HIGH(500)
00026a d0bb      	RCALL _delay_ms
                 ; 0000 0127         }
                 ; 0000 0128 
                 ; 0000 0129         if(checkFinish(redScore)){
                 _0x13D:
00026b 2dad      	MOV  R26,R13
00026c de7a      	RCALL _checkFinish
00026d 30e0      	CPI  R30,0
00026e f019      	BREQ _0x13E
                 ; 0000 012A             TIMSK = (0<<TOIE2) | (1<<TOIE0);
00026f d0b1      	RCALL SUBOPT_0x1E
                 ; 0000 012B             redScores = 999;
000270 d040      	RCALL SUBOPT_0xD
                 ; 0000 012C             stopGame();
000271 decb      	RCALL _stopGame
                 ; 0000 012D         }
                 ; 0000 012E         if(checkFinish(blueScore)){
                 _0x13E:
000272 2dac      	MOV  R26,R12
000273 de73      	RCALL _checkFinish
000274 30e0      	CPI  R30,0
000275 f019      	BREQ _0x13F
                 ; 0000 012F             TIMSK = (0<<TOIE2) | (1<<TOIE0);
000276 d0aa      	RCALL SUBOPT_0x1E
                 ; 0000 0130             blueScores = 999;
000277 d02f      	RCALL SUBOPT_0xB
                 ; 0000 0131             stopGame();
000278 dec4      	RCALL _stopGame
                 ; 0000 0132         }
                 ; 0000 0133     }
                 _0x13F:
                 ; 0000 0134     RX_Config();
                 _0x139:
000279 de58      	RCALL _RX_Config
                 ; 0000 0135 }
00027a cfd8      	RJMP _0x136
                 ; 0000 0136 }
                 _0x140:
00027b cfff      	RJMP _0x140
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _number:
000160           	.BYTE 0xA
                 _numberA:
00016a           	.BYTE 0xA
                 _redScores:
000174           	.BYTE 0x2
                 _blueScores:
000176           	.BYTE 0x2
                 _timeOut:
000178           	.BYTE 0x1
                 _a:
000179           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
                +
00027c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00027d 958a     +DEC R24
00027e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00027f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000280 9aad      	SBI  0x15,5
000281 dffa      	RCALL SUBOPT_0x0
000282 e0e0      	LDI  R30,0
000283 999c      	SBIC 0x13,4
000284 e0e1      	LDI  R30,1
000285 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000286 93aa      	ST   -Y,R26
000287 98a9      	CBI  0x15,1
000288 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000289 81a8      	LD   R26,Y
00028a cdd1      	RJMP _SPI_Write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
00028b 9aa9      	SBI  0x15,1
                +
00028c e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00028d 958a     +DEC R24
00028e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
00028f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
                +
000290 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000291 958a     +DEC R24
000292 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000293 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
000294 e0e7      	LDI  R30,LOW(7)
000295 93ea      	ST   -Y,R30
000296 e7ae      	LDI  R26,LOW(126)
000297 cdf0      	RJMP _RF_Write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000298 e0e0      	LDI  R30,LOW(0)
000299 93ea      	ST   -Y,R30
00029a e1af      	LDI  R26,LOW(31)
00029b cdec      	RJMP _RF_Write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
00029c 93ea      	ST   -Y,R30
00029d e0a1      	LDI  R26,LOW(1)
00029e cde9      	RJMP _RF_Write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
00029f 15e8      	CP   R30,R8
0002a0 05f9      	CPC  R31,R9
0002a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
0002a2 91e0 0176 	LDS  R30,_blueScores
0002a4 91f0 0177 	LDS  R31,_blueScores+1
0002a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xB:
0002a7 93e0 0176 	STS  _blueScores,R30
0002a9 93f0 0177 	STS  _blueScores+1,R31
0002ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
0002ac 91e0 0174 	LDS  R30,_redScores
0002ae 91f0 0175 	LDS  R31,_redScores+1
0002b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xD:
0002b1 93e0 0174 	STS  _redScores,R30
0002b3 93f0 0175 	STS  _redScores+1,R31
0002b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
0002b6 2dab      	MOV  R26,R11
0002b7 e0b0      	LDI  R27,0
0002b8 e6e4      	LDI  R30,LOW(100)
0002b9 e0f0      	LDI  R31,HIGH(100)
0002ba d08c      	RCALL __DIVW21
0002bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xF:
0002bc 5ae0      	SUBI R30,LOW(-_number)
0002bd 4ffe      	SBCI R31,HIGH(-_number)
0002be 81e0      	LD   R30,Z
0002bf bbe8      	OUT  0x18,R30
0002c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x10:
0002c1 59e6      	SUBI R30,LOW(-_numberA)
0002c2 4ffe      	SBCI R31,HIGH(-_numberA)
0002c3 81e0      	LD   R30,Z
0002c4 30e0      	CPI  R30,0
0002c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x11:
0002c6 9a96      	SBI  0x12,6
0002c7 9a95      	SBI  0x12,5
0002c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x12:
0002c9 9a94      	SBI  0x12,4
0002ca 9ac6      	SBI  0x18,6
0002cb 9ac7      	SBI  0x18,7
0002cc 9a91      	SBI  0x12,1
0002cd 9a92      	SBI  0x12,2
0002ce 9a93      	SBI  0x12,3
0002cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x13:
0002d0 2dab      	MOV  R26,R11
0002d1 27bb      	CLR  R27
0002d2 e6e4      	LDI  R30,LOW(100)
0002d3 e0f0      	LDI  R31,HIGH(100)
0002d4 d077      	RCALL __MODW21
0002d5 01df      	MOVW R26,R30
0002d6 e0ea      	LDI  R30,LOW(10)
0002d7 e0f0      	LDI  R31,HIGH(10)
0002d8 d06e      	RCALL __DIVW21
0002d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x14:
0002da 2dab      	MOV  R26,R11
0002db 27bb      	CLR  R27
0002dc e0ea      	LDI  R30,LOW(10)
0002dd e0f0      	LDI  R31,HIGH(10)
0002de d06d      	RCALL __MODW21
0002df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x15:
0002e0 91a0 0174 	LDS  R26,_redScores
0002e2 91b0 0175 	LDS  R27,_redScores+1
0002e4 e6e4      	LDI  R30,LOW(100)
0002e5 e0f0      	LDI  R31,HIGH(100)
0002e6 d060      	RCALL __DIVW21
0002e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
0002e8 9a97      	SBI  0x12,7
0002e9 cfdc      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
0002ea 9ac6      	SBI  0x18,6
0002eb 9ac7      	SBI  0x18,7
0002ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x18:
0002ed 9a91      	SBI  0x12,1
0002ee 9a92      	SBI  0x12,2
0002ef 9a93      	SBI  0x12,3
0002f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x19:
0002f1 91a0 0174 	LDS  R26,_redScores
0002f3 91b0 0175 	LDS  R27,_redScores+1
0002f5 e6e4      	LDI  R30,LOW(100)
0002f6 e0f0      	LDI  R31,HIGH(100)
0002f7 d054      	RCALL __MODW21
0002f8 01df      	MOVW R26,R30
0002f9 e0ea      	LDI  R30,LOW(10)
0002fa e0f0      	LDI  R31,HIGH(10)
0002fb d04b      	RCALL __DIVW21
0002fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1A:
0002fd 91a0 0174 	LDS  R26,_redScores
0002ff 91b0 0175 	LDS  R27,_redScores+1
000301 e0ea      	LDI  R30,LOW(10)
000302 e0f0      	LDI  R31,HIGH(10)
000303 d048      	RCALL __MODW21
000304 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1B:
000305 91a0 0176 	LDS  R26,_blueScores
000307 91b0 0177 	LDS  R27,_blueScores+1
000309 e6e4      	LDI  R30,LOW(100)
00030a e0f0      	LDI  R31,HIGH(100)
00030b d03b      	RCALL __DIVW21
00030c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1C:
00030d 91a0 0176 	LDS  R26,_blueScores
00030f 91b0 0177 	LDS  R27,_blueScores+1
000311 e6e4      	LDI  R30,LOW(100)
000312 e0f0      	LDI  R31,HIGH(100)
000313 d038      	RCALL __MODW21
000314 01df      	MOVW R26,R30
000315 e0ea      	LDI  R30,LOW(10)
000316 e0f0      	LDI  R31,HIGH(10)
000317 d02f      	RCALL __DIVW21
000318 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1D:
000319 91a0 0176 	LDS  R26,_blueScores
00031b 91b0 0177 	LDS  R27,_blueScores+1
00031d e0ea      	LDI  R30,LOW(10)
00031e e0f0      	LDI  R31,HIGH(10)
00031f d02c      	RCALL __MODW21
000320 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
000321 e0e1      	LDI  R30,LOW(1)
000322 bfe9      	OUT  0x39,R30
000323 eee7      	LDI  R30,LOW(999)
000324 e0f3      	LDI  R31,HIGH(999)
000325 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000326 9610      	adiw r26,0
000327 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000328 ed80     +LDI R24 , LOW ( 0x7D0 )
000329 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00032a 9701     +SBIW R24 , 1
00032b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00032c 95a8      	wdr
00032d 9711      	sbiw r26,1
00032e f7c9      	brne __delay_ms0
                 __delay_ms1:
00032f 9508      	ret
                 
                 __ANEGW1:
000330 95f1      	NEG  R31
000331 95e1      	NEG  R30
000332 40f0      	SBCI R31,0
000333 9508      	RET
                 
                 __DIVW21U:
000334 2400      	CLR  R0
000335 2411      	CLR  R1
000336 e190      	LDI  R25,16
                 __DIVW21U1:
000337 0faa      	LSL  R26
000338 1fbb      	ROL  R27
000339 1c00      	ROL  R0
00033a 1c11      	ROL  R1
00033b 1a0e      	SUB  R0,R30
00033c 0a1f      	SBC  R1,R31
00033d f418      	BRCC __DIVW21U2
00033e 0e0e      	ADD  R0,R30
00033f 1e1f      	ADC  R1,R31
000340 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000341 60a1      	SBR  R26,1
                 __DIVW21U3:
000342 959a      	DEC  R25
000343 f799      	BRNE __DIVW21U1
000344 01fd      	MOVW R30,R26
000345 01d0      	MOVW R26,R0
000346 9508      	RET
                 
                 __DIVW21:
000347 d012      	RCALL __CHKSIGNW
000348 dfeb      	RCALL __DIVW21U
000349 f40e      	BRTC __DIVW211
00034a dfe5      	RCALL __ANEGW1
                 __DIVW211:
00034b 9508      	RET
                 
                 __MODW21:
00034c 94e8      	CLT
00034d ffb7      	SBRS R27,7
00034e c004      	RJMP __MODW211
00034f 95a0      	COM  R26
000350 95b0      	COM  R27
000351 9611      	ADIW R26,1
000352 9468      	SET
                 __MODW211:
000353 fdf7      	SBRC R31,7
000354 dfdb      	RCALL __ANEGW1
000355 dfde      	RCALL __DIVW21U
000356 01fd      	MOVW R30,R26
000357 f40e      	BRTC __MODW212
000358 dfd7      	RCALL __ANEGW1
                 __MODW212:
000359 9508      	RET
                 
                 __CHKSIGNW:
00035a 94e8      	CLT
00035b fff7      	SBRS R31,7
00035c c002      	RJMP __CHKSW1
00035d dfd2      	RCALL __ANEGW1
00035e 9468      	SET
                 __CHKSW1:
00035f ffb7      	SBRS R27,7
000360 c006      	RJMP __CHKSW2
000361 95a0      	COM  R26
000362 95b0      	COM  R27
000363 9611      	ADIW R26,1
000364 f800      	BLD  R0,0
000365 9403      	INC  R0
000366 fa00      	BST  R0,0
                 __CHKSW2:
000367 9508      	RET
                 
                 __SAVELOCR2:
000368 931a      	ST   -Y,R17
000369 930a      	ST   -Y,R16
00036a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :  16 r1 :   9 r2 :   0 r3 :   0 r4 :   1 r5 :   0 r6 :   3 r7 :   1 
r8 :   2 r9 :   2 r10:  11 r11:   5 r12:   5 r13:   2 r14:   0 r15:   2 
r16:   5 r17:  11 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  19 r25:  10 r26:  62 r27:  24 r28:   3 r29:   1 r30: 199 r31:  45 
x  :   7 y  :  68 z  :   9 
Registers used: 27 out of 35 (77.1%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :  14 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  44 brpl  :   0 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 cbi   :  28 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   8 
cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 cp    :  10 
cpc   :   1 cpi   :   7 cpse  :   0 dec   :   7 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 
inc   :   2 ld    :  29 ldd   :   7 ldi   : 141 lds   :  19 lpm   :   7 
lsl   :   3 lsr   :   0 mov   :  12 movw  :   9 mul   :   0 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   7 ori   :   2 out   :  28 
pop   :   0 push  :   0 rcall : 166 ret   :  43 reti  :   2 rjmp  :  68 
rol   :   3 ror   :   0 sbc   :   1 sbci  :   3 sbi   :  49 sbic  :   2 
sbis  :   0 sbiw  :   7 sbr   :   1 sbrc  :   1 sbrs  :   3 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   2 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  39 std   :   2 
sts   :   8 sub   :   1 subi  :   4 swap  :   0 tst   :   2 wdr   :   1 

Instructions used: 56 out of 114 (49.1%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006d6   1692     58   1750    8192  21.4%
[.dseg] 0x000060 0x00017b      0     27     27    1024   2.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
