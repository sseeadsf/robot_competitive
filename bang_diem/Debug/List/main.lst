
AVRASM ver. 2.1.30  D:\Embedded\ATmega\thi_robot_new\bang_diem\Debug\List\main.asm Sun Feb 04 09:33:41 2018

D:\Embedded\ATmega\thi_robot_new\bang_diem\Debug\List\main.asm(1086): warning: Register r5 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem\Debug\List\main.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem\Debug\List\main.asm(1088): warning: Register r7 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem\Debug\List\main.asm(1089): warning: Register r8 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem\Debug\List\main.asm(1090): warning: Register r9 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem\Debug\List\main.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem\Debug\List\main.asm(1092): warning: Register r11 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem\Debug\List\main.asm(1093): warning: Register r10 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem\Debug\List\main.asm(1094): warning: Register r13 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\bang_diem\Debug\List\main.asm(1095): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Send_Add=R5
                 	.DEF _Receive_Add=R4
                 	.DEF _Salt_Add=R7
                 	.DEF _score=R8
                 	.DEF _score_msb=R9
                 	.DEF _milisecond=R6
                 	.DEF _second=R11
                 	.DEF _led=R10
                 	.DEF _red_score=R13
                 	.DEF _blue_score=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c02f      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 c1ee      	RJMP _timer2_interrupt
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b c13f      	RJMP _timer0_ovf_isr
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000013 c0b1
000014 ab64      	.DB  0xB1,0xC0,0x64,0xAB
000015 0000
000016 b401      	.DB  0x0,0x0,0x1,0xB4
000017 0000      	.DB  0x0,0x0
                 
                 _0x53:
000018 063f
000019 0f1b
00001a 2d26
00001b 073d      	.DB  0x3F,0x6,0x1B,0xF,0x26,0x2D,0x3D,0x7
00001c 2f3f      	.DB  0x3F,0x2F
                 _0x54:
00001d 0000
00001e 0100
00001f 0101
000020 0001      	.DB  0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x0
000021 0101      	.DB  0x1,0x1
                 _0x55:
D:\Embedded\ATmega\thi_robot_new\bang_diem\Debug\List\main.asm(1137): warning: .cseg .db misalignment - padding zero byte
000022 0001      	.DB  0x1
                 
                 __GLOBAL_INI_TBL:
000023 000a      	.DW  0x0A
000024 0004      	.DW  0x04
000025 0026      	.DW  __REG_VARS*2
                 
000026 000a      	.DW  0x0A
000027 0160      	.DW  _number
000028 0030      	.DW  _0x53*2
                 
000029 000a      	.DW  0x0A
00002a 016a      	.DW  _numberG
00002b 003a      	.DW  _0x54*2
                 
00002c 0001      	.DW  0x01
00002d 0178      	.DW  _time_out
00002e 0044      	.DW  _0x55*2
                 
                 _0xFFFFFFFF:
00002f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000030 94f8      	CLI
000031 27ee      	CLR  R30
000032 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000033 e0f1      	LDI  R31,1
000034 bffb      	OUT  GICR,R31
000035 bfeb      	OUT  GICR,R30
000036 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000037 e08d      	LDI  R24,(14-2)+1
000038 e0a2      	LDI  R26,2
000039 27bb      	CLR  R27
                 __CLEAR_REG:
00003a 93ed      	ST   X+,R30
00003b 958a      	DEC  R24
00003c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003e e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000040 93ed      	ST   X+,R30
000041 9701      	SBIW R24,1
000042 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000043 e4e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000044 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000045 9185      	LPM  R24,Z+
000046 9195      	LPM  R25,Z+
000047 9700      	SBIW R24,0
000048 f061      	BREQ __GLOBAL_INI_END
000049 91a5      	LPM  R26,Z+
00004a 91b5      	LPM  R27,Z+
00004b 9005      	LPM  R0,Z+
00004c 9015      	LPM  R1,Z+
00004d 01bf      	MOVW R22,R30
00004e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004f 9005      	LPM  R0,Z+
000050 920d      	ST   X+,R0
000051 9701      	SBIW R24,1
000052 f7e1      	BRNE __GLOBAL_INI_LOOP
000053 01fb      	MOVW R30,R22
000054 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000055 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000056 bfed      	OUT  SPL,R30
000057 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000058 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000059 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005a e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005b c1d0      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdbool.h>
                 ;
                 ;#define LED_SEG             PORTB
                 ;#define LED_G               PORTC.0
                 ;#define LED_TIME1           PORTD.6
                 ;#define LED_TIME2           PORTD.5
                 ;#define LED_TIME3           PORTB.7
                 ;#define LED_BLUE_SCORE1     PORTB.6
                 ;#define LED_BLUE_SCORE2     PORTD.4
                 ;#define LED_BLUE_SCORE3     PORTD.3
                 ;#define LED_RED_SCORE1      PORTD.2
                 ;#define LED_RED_SCORE2      PORTD.1
                 ;#define LED_RED_SCORE3      PORTD.7
                 ;
                 ;#define CE                  PORTD.0
                 ;#define CSN                 PORTC.1
                 ;#define SCK                 PORTC.5
                 ;#define MOSI                PORTC.2
                 ;#define MISO                PINC.4
                 ;#define IRQ                 PINC.3
                 ;char Send_Add = 0xC0, Receive_Add = 0xB1, Salt_Add = 0xAB;
                 ;int score;
                 ;#include "rf.c"
                 ;#define CONFIG      	0x00
                 ;#define EN_AA       	0x01
                 ;#define EN_RXADDR   	0x02
                 ;#define SETUP_AW    	0x03
                 ;#define SETUP_RETR  	0x04
                 ;#define RF_CH       	0x05
                 ;#define RF_SETUP    	0x06
                 ;#define STATUS  		0x07
                 ;#define OBSERVE_TX  	0x08
                 ;#define RPD          	0x09
                 ;#define RX_ADDR_P0  	0x0A
                 ;#define RX_ADDR_P1  	0x0B
                 ;#define RX_ADDR_P2  	0x0C
                 ;#define RX_ADDR_P3  	0x0D
                 ;#define RX_ADDR_P4  	0x0E
                 ;#define RX_ADDR_P5  	0x0F
                 ;#define TX_ADDR     	0x10
                 ;#define RX_PW_P0    	0x11
                 ;#define RX_PW_P1    	0x12
                 ;#define RX_PW_P2    	0x13
                 ;#define RX_PW_P3    	0x14
                 ;#define RX_PW_P4    	0x15
                 ;#define RX_PW_P5    	0x16
                 ;#define FIFO_STATUS 	0x17
                 ;#define DYNPD	    	0x1C
                 ;#define FEATURE	    	0x1D
                 ;
                 ;void SPI_Write(unsigned char Buff){
                 ; 0000 001C void SPI_Write(unsigned char Buff){
                 
                 	.CSEG
                 _SPI_Write:
                 ; .FSTART _SPI_Write
                 ;    unsigned char bit_ctr;
                 ;    for(bit_ctr=0;bit_ctr<8;bit_ctr++){
00005c 93aa      	ST   -Y,R26
00005d 931a      	ST   -Y,R17
                 ;	Buff -> Y+1
                 ;	bit_ctr -> R17
00005e e010      	LDI  R17,LOW(0)
                 _0x4:
00005f 3018      	CPI  R17,8
000060 f488      	BRSH _0x5
                 ;        MOSI = (Buff & 0x80);
000061 81e9      	LDD  R30,Y+1
000062 78e0      	ANDI R30,LOW(0x80)
000063 f411      	BRNE _0x6
000064 98aa      	CBI  0x15,2
000065 c001      	RJMP _0x7
                 _0x6:
000066 9aaa      	SBI  0x15,2
                 _0x7:
                 ;        delay_us(5);
000067 d20e      	RCALL SUBOPT_0x0
                 ;        Buff = (Buff << 1);
000068 81e9      	LDD  R30,Y+1
000069 0fee      	LSL  R30
00006a 83e9      	STD  Y+1,R30
                 ;        SCK = 1;
00006b d20e      	RCALL SUBOPT_0x1
                 ;        delay_us(5);
                 ;        Buff |= MISO;
00006c 81a9      	LDD  R26,Y+1
00006d 2bea      	OR   R30,R26
00006e 83e9      	STD  Y+1,R30
                 ;        SCK = 0;
00006f 98ad      	CBI  0x15,5
                 ;    }
000070 5f1f      	SUBI R17,-1
000071 cfed      	RJMP _0x4
                 _0x5:
                 ;}
000072 8118      	LDD  R17,Y+0
000073 c026      	RJMP _0x2020004
                 ; .FEND
                 ;
                 ;unsigned char SPI_Read(void){
                 _SPI_Read:
                 ; .FSTART _SPI_Read
                 ;    unsigned char Buff=0;
                 ;    unsigned char bit_ctr;
                 ;    for(bit_ctr=0;bit_ctr<8;bit_ctr++){
000074 d2ea      	RCALL __SAVELOCR2
                 ;	Buff -> R17
                 ;	bit_ctr -> R16
000075 e010      	LDI  R17,0
000076 e000      	LDI  R16,LOW(0)
                 _0xD:
000077 3008      	CPI  R16,8
000078 f438      	BRSH _0xE
                 ;        delay_us(5);
000079 d1fc      	RCALL SUBOPT_0x0
                 ;        Buff = (Buff << 1);
00007a 0f11      	LSL  R17
                 ;        SCK = 1;
00007b d1fe      	RCALL SUBOPT_0x1
                 ;        delay_us(5);
                 ;        Buff |= MISO;
00007c 2b1e      	OR   R17,R30
                 ;        SCK = 0;
00007d 98ad      	CBI  0x15,5
                 ;    }
00007e 5f0f      	SUBI R16,-1
00007f cff7      	RJMP _0xD
                 _0xE:
                 ;    return(Buff);
000080 2fe1      	MOV  R30,R17
000081 9109      	LD   R16,Y+
000082 9119      	LD   R17,Y+
000083 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;void RF_Command(unsigned char command){
                 _RF_Command:
                 ; .FSTART _RF_Command
                 ;    CSN=0;
000084 d1fb      	RCALL SUBOPT_0x2
                 ;	command -> Y+0
                 ;    SPI_Write(command);
000085 d1fd      	RCALL SUBOPT_0x3
                 ;    CSN=1;
000086 d1fe      	RCALL SUBOPT_0x4
                 ;    delay_us(10);
                 ;}
000087 c064      	RJMP _0x2020002
                 ; .FEND
                 ;
                 ;
                 ;void RF_Write(unsigned char Reg_Add, unsigned char Value){
                 _RF_Write:
                 ; .FSTART _RF_Write
                 ;    CSN=0;
000088 d1f7      	RCALL SUBOPT_0x2
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_Write(0b00100000|Reg_Add);
000089 81e9      	LDD  R30,Y+1
00008a 62e0      	ORI  R30,0x20
00008b 2fae      	MOV  R26,R30
00008c c00a      	RJMP _0x2020003
                 ;    SPI_Write(Value);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;}
                 ; .FEND
                 ;
                 ;void RF_Write_Add(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
                 ;{
                 _RF_Write_Add:
                 ; .FSTART _RF_Write_Add
                 ;    CSN=0;
00008d d1f2      	RCALL SUBOPT_0x2
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_Write(0b00100000|Reg_Add);
00008e 81e9      	LDD  R30,Y+1
00008f 62e0      	ORI  R30,0x20
000090 2fae      	MOV  R26,R30
000091 dfca      	RCALL _SPI_Write
                 ;    SPI_Write(Salt_Add);
000092 2da7      	MOV  R26,R7
000093 dfc8      	RCALL _SPI_Write
                 ;    SPI_Write(Value);
000094 d1ee      	RCALL SUBOPT_0x3
                 ;    SPI_Write(Value);
000095 d1ed      	RCALL SUBOPT_0x3
                 ;    SPI_Write(Value);
000096 81a8      	LD   R26,Y
                 _0x2020003:
000097 dfc4      	RCALL _SPI_Write
                 ;    SPI_Write(Value);
000098 d1ea      	RCALL SUBOPT_0x3
                 ;    CSN=1;
000099 d1eb      	RCALL SUBOPT_0x4
                 ;    delay_us(10);
                 ;}
                 _0x2020004:
00009a 9622      	ADIW R28,2
00009b 9508      	RET
                 ; .FEND
                 ;
                 ;void TX_Address(unsigned char Address){
                 ;    CSN=0;
                 ;	Address -> Y+0
                 ;    RF_Write(SETUP_AW,0b00000011);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    //RF_Write_Add(RX_ADDR_P0, Address);
                 ;    RF_Write_Add(TX_ADDR, Address);
                 ;}
                 ;
                 ;void RX_Address(unsigned char Address){
                 _RX_Address:
                 ; .FSTART _RX_Address
                 ;    CSN=0;
00009c d1e3      	RCALL SUBOPT_0x2
                 ;	Address -> Y+0
                 ;    RF_Write(SETUP_AW,0b00000011);
00009d e0e3      	LDI  R30,LOW(3)
00009e 93ea      	ST   -Y,R30
00009f e0a3      	LDI  R26,LOW(3)
0000a0 dfe7      	RCALL _RF_Write
                 ;    CSN=1;
0000a1 d1e3      	RCALL SUBOPT_0x4
                 ;    delay_us(10);
                 ;    CSN=0;
0000a2 98a9      	CBI  0x15,1
                 ;    RF_Write_Add(RX_ADDR_P0, Address);
0000a3 e0ea      	LDI  R30,LOW(10)
0000a4 93ea      	ST   -Y,R30
0000a5 81a9      	LDD  R26,Y+1
0000a6 dfe6      	RCALL _RF_Write_Add
                 ;    //RF_Write_Add(RX_PW_P0, Address);
                 ;}
0000a7 c044      	RJMP _0x2020002
                 ; .FEND
                 ;
                 ;
                 ;void Common_Config(){
                 _Common_Config:
                 ; .FSTART _Common_Config
                 ;    CE=0;
0000a8 9890      	CBI  0x12,0
                 ;    CSN=1;
0000a9 9aa9      	SBI  0x15,1
                 ;    SCK=0;
0000aa 98ad      	CBI  0x15,5
                 ;    delay_us(10);
0000ab d1de      	RCALL SUBOPT_0x5
                 ;    RF_Write(STATUS,0b01111110);
0000ac d1e1      	RCALL SUBOPT_0x6
                 ;    RF_Command(0b11100010);
0000ad eea2      	LDI  R26,LOW(226)
0000ae dfd5      	RCALL _RF_Command
                 ;    RF_Write(CONFIG,0b00011111);
0000af d1e2      	RCALL SUBOPT_0x7
                 ;    delay_ms(2);
0000b0 e0a2      	LDI  R26,LOW(2)
0000b1 e0b0      	LDI  R27,0
0000b2 d26a      	RCALL _delay_ms
                 ;    RF_Write(STATUS,0b01111110);
0000b3 d1da      	RCALL SUBOPT_0x6
                 ;    //RF_Write(FEATURE, 0b00000100);
                 ;    RF_Write(RF_CH,0b00000010);
0000b4 e0e5      	LDI  R30,LOW(5)
0000b5 93ea      	ST   -Y,R30
0000b6 e0a2      	LDI  R26,LOW(2)
0000b7 dfd0      	RCALL _RF_Write
                 ;	RF_Write(RX_PW_P0,0b00000001);
0000b8 e1e1      	LDI  R30,LOW(17)
0000b9 93ea      	ST   -Y,R30
0000ba e0a1      	LDI  R26,LOW(1)
0000bb dfcc      	RCALL _RF_Write
                 ;    RF_Write(RF_SETUP, 0b00000110);
0000bc e0e6      	LDI  R30,LOW(6)
0000bd 93ea      	ST   -Y,R30
0000be e0a6      	LDI  R26,LOW(6)
0000bf dfc8      	RCALL _RF_Write
                 ;    //RF_Write(DYNPD,0b00000001);
                 ;    RF_Write(EN_RXADDR,0b00000001);
0000c0 e0e2      	LDI  R30,LOW(2)
0000c1 93ea      	ST   -Y,R30
0000c2 e0a1      	LDI  R26,LOW(1)
0000c3 dfc4      	RCALL _RF_Write
                 ;}
0000c4 9508      	RET
                 ; .FEND
                 ;
                 ;void Common_Init(){
                 _Common_Init:
                 ; .FSTART _Common_Init
                 ;    CE=1;
0000c5 9a90      	SBI  0x12,0
                 ;    delay_us(700);
                +
0000c6 e788     +LDI R24 , LOW ( 1400 )
0000c7 e095     +LDI R25 , HIGH ( 1400 )
                +__DELAY_USW_LOOP :
0000c8 9701     +SBIW R24 , 1
0000c9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1400
                 ;    CE=0;
0000ca 9890      	CBI  0x12,0
                 ;    CSN=1;
0000cb 9aa9      	SBI  0x15,1
                 ;}
0000cc 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void TX_Mode(){
                 ;    CE=0;
                 ;    RF_Write(CONFIG,0b00011110);
                 ;}
                 ;
                 ;void RX_Mode(){
                 _RX_Mode:
                 ; .FSTART _RX_Mode
                 ;    RF_Write(CONFIG,0b00011111);
0000cd d1c4      	RCALL SUBOPT_0x7
                 ;    CE=1;
0000ce 9a90      	SBI  0x12,0
                 ;}
0000cf 9508      	RET
                 ; .FEND
                 ;
                 ;void TX_Config(){
                 ;    RF_Write(STATUS,0b01111110);
                 ;    RF_Command(0b11100010);
                 ;    TX_Address(Send_Add);
                 ;}
                 ;
                 ;void RX_Config(){
                 _RX_Config:
                 ; .FSTART _RX_Config
                 ;    RF_Write(STATUS,0b01111110);
0000d0 d1bd      	RCALL SUBOPT_0x6
                 ;    RF_Command(0b11100010);
0000d1 eea2      	LDI  R26,LOW(226)
0000d2 dfb1      	RCALL _RF_Command
                 ;    RX_Address(Receive_Add);
0000d3 2da4      	MOV  R26,R4
0000d4 dfc7      	RCALL _RX_Address
                 ;}
0000d5 9508      	RET
                 ; .FEND
                 ;
                 ;void clear(){
                 ;    RF_Write(STATUS,0b01111110);
                 ;    RF_Command(0b11100010);
                 ;}
                 ;
                 ;void TX_Send(){
                 ;    TX_Address(Send_Add);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_Write(0b11100001);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_Write(0b10100000);
                 ;    SPI_Write(score);
                 ;    CSN=1;
                 ;    CE=1;
                 ;    delay_us(500);
                 ;    CE=0;
                 ;    RF_Write(0x07,0b01111110);
                 ;    TX_Address(Send_Add);
                 ;    RF_Command(0b11100001);
                 ;}
                 ;
                 ;void RX_Read(){
                 _RX_Read:
                 ; .FSTART _RX_Read
                 ;    CE=0;
0000d6 9890      	CBI  0x12,0
                 ;    CSN=1;
0000d7 d1ad      	RCALL SUBOPT_0x4
                 ;    delay_us(10);
                 ;    CSN=0;
0000d8 98a9      	CBI  0x15,1
                 ;    SPI_Write(0b01100001);
0000d9 e6a1      	LDI  R26,LOW(97)
0000da df81      	RCALL _SPI_Write
                 ;    delay_us(10);
0000db d1ae      	RCALL SUBOPT_0x5
                 ;    score = SPI_Read();
0000dc df97      	RCALL _SPI_Read
0000dd 2e8e      	MOV  R8,R30
0000de 2499      	CLR  R9
                 ;    CSN=1;
0000df 9aa9      	SBI  0x15,1
                 ;    CE=1;
0000e0 9a90      	SBI  0x12,0
                 ;    RF_Write(STATUS,0b01111110);
0000e1 d1ac      	RCALL SUBOPT_0x6
                 ;    RF_Command(0b11100010);
0000e2 eea2      	LDI  R26,LOW(226)
0000e3 dfa0      	RCALL _RF_Command
                 ;}
0000e4 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char number[10] = {0x3F, 0x06, 0x1B, 0x0F, 0x26, 0x2D, 0x3D, 0x07, 0x3F, 0x2F};
                 
                 	.DSEG
                 ;unsigned char numberG[10] = {0, 0, 0, 1, 1, 1, 1, 0, 1, 1};
                 ;unsigned char milisecond = 100, second = 180;
                 ;unsigned char led = 1;
                 ;unsigned char red_score = 0b0000;
                 ;unsigned char blue_score = 0b0000;
                 ;int red_scores = 0, blue_scores = 0;
                 ;bool time_out = true;
                 ;int a;
                 ;
                 ;bool check_finish(unsigned char input){
                 ; 0000 0028 _Bool check_finish(unsigned char input){
                 
                 	.CSEG
                 _check_finish:
                 ; .FSTART _check_finish
                 ; 0000 0029     if(input == 0b1111)
0000e5 93aa      	ST   -Y,R26
                 ;	input -> Y+0
0000e6 81a8      	LD   R26,Y
0000e7 30af      	CPI  R26,LOW(0xF)
0000e8 f411      	BRNE _0x56
                 ; 0000 002A         return true;
0000e9 e0e1      	LDI  R30,LOW(1)
0000ea c001      	RJMP _0x2020002
                 ; 0000 002B     else
                 _0x56:
                 ; 0000 002C         return false;
0000eb e0e0      	LDI  R30,LOW(0)
                 ; 0000 002D }
                 _0x2020002:
0000ec 9621      	ADIW R28,1
0000ed 9508      	RET
                 ; .FEND
                 ;
                 ;void get_score(){
                 ; 0000 002F void get_score(){
                 _get_score:
                 ; .FSTART _get_score
                 ; 0000 0030     if(score == 1){
0000ee e0e1      	LDI  R30,LOW(1)
0000ef e0f0      	LDI  R31,HIGH(1)
0000f0 d1a5      	RCALL SUBOPT_0x8
0000f1 f431      	BRNE _0x58
                 ; 0000 0031         blue_scores += 2;
0000f2 d1a6      	RCALL SUBOPT_0x9
0000f3 9632      	ADIW R30,2
0000f4 d1a9      	RCALL SUBOPT_0xA
                 ; 0000 0032         blue_score |= 0b0001;
0000f5 e0e1      	LDI  R30,LOW(1)
0000f6 2ace      	OR   R12,R30
                 ; 0000 0033     }
                 ; 0000 0034     else if(score == 2){
0000f7 c042      	RJMP _0x59
                 _0x58:
0000f8 e0e2      	LDI  R30,LOW(2)
0000f9 e0f0      	LDI  R31,HIGH(2)
0000fa d19b      	RCALL SUBOPT_0x8
0000fb f431      	BRNE _0x5A
                 ; 0000 0035         blue_scores += 3;
0000fc d19c      	RCALL SUBOPT_0x9
0000fd 9633      	ADIW R30,3
0000fe d19f      	RCALL SUBOPT_0xA
                 ; 0000 0036         blue_score |= 0b0010;
0000ff e0e2      	LDI  R30,LOW(2)
000100 2ace      	OR   R12,R30
                 ; 0000 0037     }
                 ; 0000 0038     else if(score == 3){
000101 c038      	RJMP _0x5B
                 _0x5A:
000102 e0e3      	LDI  R30,LOW(3)
000103 e0f0      	LDI  R31,HIGH(3)
000104 d191      	RCALL SUBOPT_0x8
000105 f431      	BRNE _0x5C
                 ; 0000 0039         blue_scores += 5;
000106 d192      	RCALL SUBOPT_0x9
000107 9635      	ADIW R30,5
000108 d195      	RCALL SUBOPT_0xA
                 ; 0000 003A         blue_score |= 0b0100;
000109 e0e4      	LDI  R30,LOW(4)
00010a 2ace      	OR   R12,R30
                 ; 0000 003B     }
                 ; 0000 003C     else if(score == 4){
00010b c02e      	RJMP _0x5D
                 _0x5C:
00010c e0e4      	LDI  R30,LOW(4)
00010d e0f0      	LDI  R31,HIGH(4)
00010e d187      	RCALL SUBOPT_0x8
00010f f431      	BRNE _0x5E
                 ; 0000 003D         blue_scores += 10;
000110 d188      	RCALL SUBOPT_0x9
000111 963a      	ADIW R30,10
000112 d18b      	RCALL SUBOPT_0xA
                 ; 0000 003E         blue_score |= 0b1000;
000113 e0e8      	LDI  R30,LOW(8)
000114 2ace      	OR   R12,R30
                 ; 0000 003F     }
                 ; 0000 0040     else if(score == 5){
000115 c024      	RJMP _0x5F
                 _0x5E:
000116 e0e5      	LDI  R30,LOW(5)
000117 e0f0      	LDI  R31,HIGH(5)
000118 d17d      	RCALL SUBOPT_0x8
000119 f429      	BRNE _0x60
                 ; 0000 0041         red_scores += 2;
00011a d188      	RCALL SUBOPT_0xB
00011b 9632      	ADIW R30,2
00011c d18b      	RCALL SUBOPT_0xC
                 ; 0000 0042         red_score |= 0b0001;
00011d e0e1      	LDI  R30,LOW(1)
00011e c01a      	RJMP _0x136
                 ; 0000 0043     }
                 ; 0000 0044     else if(score == 6){
                 _0x60:
00011f e0e6      	LDI  R30,LOW(6)
000120 e0f0      	LDI  R31,HIGH(6)
000121 d174      	RCALL SUBOPT_0x8
000122 f429      	BRNE _0x62
                 ; 0000 0045         red_scores += 3;
000123 d17f      	RCALL SUBOPT_0xB
000124 9633      	ADIW R30,3
000125 d182      	RCALL SUBOPT_0xC
                 ; 0000 0046         red_score |= 0b0010;
000126 e0e2      	LDI  R30,LOW(2)
000127 c011      	RJMP _0x136
                 ; 0000 0047     }
                 ; 0000 0048     else if(score == 7){
                 _0x62:
000128 e0e7      	LDI  R30,LOW(7)
000129 e0f0      	LDI  R31,HIGH(7)
00012a d16b      	RCALL SUBOPT_0x8
00012b f429      	BRNE _0x64
                 ; 0000 0049         red_scores += 5;
00012c d176      	RCALL SUBOPT_0xB
00012d 9635      	ADIW R30,5
00012e d179      	RCALL SUBOPT_0xC
                 ; 0000 004A         red_score |= 0b0100;
00012f e0e4      	LDI  R30,LOW(4)
000130 c008      	RJMP _0x136
                 ; 0000 004B     }
                 ; 0000 004C     else if(score == 8){
                 _0x64:
000131 e0e8      	LDI  R30,LOW(8)
000132 e0f0      	LDI  R31,HIGH(8)
000133 d162      	RCALL SUBOPT_0x8
000134 f429      	BRNE _0x66
                 ; 0000 004D         red_scores += 10;
000135 d16d      	RCALL SUBOPT_0xB
000136 963a      	ADIW R30,10
000137 d170      	RCALL SUBOPT_0xC
                 ; 0000 004E         red_score |= 0b1000;
000138 e0e8      	LDI  R30,LOW(8)
                 _0x136:
000139 2ade      	OR   R13,R30
                 ; 0000 004F     }
                 ; 0000 0050 }
                 _0x66:
                 _0x5F:
                 _0x5D:
                 _0x5B:
                 _0x59:
00013a 9508      	RET
                 ; .FEND
                 ;
                 ;void stop_game(){
                 ; 0000 0052 void stop_game(){
                 _stop_game:
                 ; .FSTART _stop_game
                 ; 0000 0053     time_out = true;
00013b e0e1      	LDI  R30,LOW(1)
00013c 93e0 0178 	STS  _time_out,R30
                 ; 0000 0054     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
00013e e0e5      	LDI  R30,LOW(5)
00013f c004      	RJMP _0x2020001
                 ; 0000 0055 }
                 ; .FEND
                 ;
                 ;void start_game(){
                 ; 0000 0057 void start_game(){
                 _start_game:
                 ; .FSTART _start_game
                 ; 0000 0058     time_out = false;
000140 e0e0      	LDI  R30,LOW(0)
000141 93e0 0178 	STS  _time_out,R30
                 ; 0000 0059     TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
000143 e4e5      	LDI  R30,LOW(69)
                 _0x2020001:
000144 bfe9      	OUT  0x39,R30
                 ; 0000 005A }
000145 9508      	RET
                 ; .FEND
                 ;
                 ;void reset_game(){
                 ; 0000 005C void reset_game(){
                 _reset_game:
                 ; .FSTART _reset_game
                 ; 0000 005D     WDTCR=0x18;
000146 e1e8      	LDI  R30,LOW(24)
000147 bde1      	OUT  0x21,R30
                 ; 0000 005E     WDTCR=0x08;
000148 e0e8      	LDI  R30,LOW(8)
000149 bde1      	OUT  0x21,R30
                 ; 0000 005F     while(1);
                 _0x67:
00014a cfff      	RJMP _0x67
                 ; 0000 0060 }
                 ; .FEND
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void){
                 ; 0000 0062 interrupt [12] void timer0_ovf_isr(void){
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
00014b 920a      	ST   -Y,R0
00014c 921a      	ST   -Y,R1
00014d 939a      	ST   -Y,R25
00014e 93aa      	ST   -Y,R26
00014f 93ba      	ST   -Y,R27
000150 93ea      	ST   -Y,R30
000151 93fa      	ST   -Y,R31
000152 b7ef      	IN   R30,SREG
000153 93ea      	ST   -Y,R30
                 ; 0000 0063     TCNT0=0x06;
000154 e0e6      	LDI  R30,LOW(6)
000155 bfe2      	OUT  0x32,R30
                 ; 0000 0064     if(led == 1){
000156 e0e1      	LDI  R30,LOW(1)
000157 15ea      	CP   R30,R10
000158 f459      	BRNE _0x6A
                 ; 0000 0065         LED_SEG = number[second/100];
000159 d153      	RCALL SUBOPT_0xD
00015a d158      	RCALL SUBOPT_0xE
                 ; 0000 0066         LED_G = numberG[second/100];
00015b d151      	RCALL SUBOPT_0xD
00015c d15b      	RCALL SUBOPT_0xF
00015d f411      	BRNE _0x6B
00015e 98a8      	CBI  0x15,0
00015f c001      	RJMP _0x6C
                 _0x6B:
000160 9aa8      	SBI  0x15,0
                 _0x6C:
                 ; 0000 0067         LED_TIME1 =         0;
000161 9896      	CBI  0x12,6
                 ; 0000 0068         LED_TIME2 =         1;
000162 d15a      	RCALL SUBOPT_0x10
                 ; 0000 0069         LED_TIME3 =         1;
                 ; 0000 006A         LED_RED_SCORE1 =    1;
000163 d15c      	RCALL SUBOPT_0x11
                 ; 0000 006B         LED_RED_SCORE2 =    1;
                 ; 0000 006C         LED_RED_SCORE3 =    1;
                 ; 0000 006D         LED_BLUE_SCORE1 =   1;
                 ; 0000 006E         LED_BLUE_SCORE2 =   1;
                 ; 0000 006F         LED_BLUE_SCORE3 =   1;
                 ; 0000 0070 
                 ; 0000 0071     }
                 ; 0000 0072     if(led == 2){
                 _0x6A:
000164 e0e2      	LDI  R30,LOW(2)
000165 15ea      	CP   R30,R10
000166 f461      	BRNE _0x7F
                 ; 0000 0073         LED_SEG = number[(second%100)/10];
000167 d15f      	RCALL SUBOPT_0x12
000168 d14a      	RCALL SUBOPT_0xE
                 ; 0000 0074         LED_G = numberG[(second%100)/10];
000169 d15d      	RCALL SUBOPT_0x12
00016a d14d      	RCALL SUBOPT_0xF
00016b f411      	BRNE _0x80
00016c 98a8      	CBI  0x15,0
00016d c001      	RJMP _0x81
                 _0x80:
00016e 9aa8      	SBI  0x15,0
                 _0x81:
                 ; 0000 0075         LED_TIME1 =         1;
00016f 9a96      	SBI  0x12,6
                 ; 0000 0076         LED_TIME2 =         0;
000170 9895      	CBI  0x12,5
                 ; 0000 0077         LED_TIME3 =         1;
000171 9ac7      	SBI  0x18,7
                 ; 0000 0078         LED_RED_SCORE1 =    1;
000172 d14d      	RCALL SUBOPT_0x11
                 ; 0000 0079         LED_RED_SCORE2 =    1;
                 ; 0000 007A         LED_RED_SCORE3 =    1;
                 ; 0000 007B         LED_BLUE_SCORE1 =   1;
                 ; 0000 007C         LED_BLUE_SCORE2 =   1;
                 ; 0000 007D         LED_BLUE_SCORE3 =   1;
                 ; 0000 007E     }
                 ; 0000 007F     if(led == 3){
                 _0x7F:
000173 e0e3      	LDI  R30,LOW(3)
000174 15ea      	CP   R30,R10
000175 f461      	BRNE _0x94
                 ; 0000 0080         LED_SEG = number[second%10];
000176 d15a      	RCALL SUBOPT_0x13
000177 d13b      	RCALL SUBOPT_0xE
                 ; 0000 0081         LED_G = numberG[second%10];
000178 d158      	RCALL SUBOPT_0x13
000179 d13e      	RCALL SUBOPT_0xF
00017a f411      	BRNE _0x95
00017b 98a8      	CBI  0x15,0
00017c c001      	RJMP _0x96
                 _0x95:
00017d 9aa8      	SBI  0x15,0
                 _0x96:
                 ; 0000 0082         LED_TIME1 =         1;
00017e 9a96      	SBI  0x12,6
                 ; 0000 0083         LED_TIME2 =         1;
00017f 9a95      	SBI  0x12,5
                 ; 0000 0084         LED_TIME3 =         0;
000180 98c7      	CBI  0x18,7
                 ; 0000 0085         LED_RED_SCORE1 =    1;
000181 d13e      	RCALL SUBOPT_0x11
                 ; 0000 0086         LED_RED_SCORE2 =    1;
                 ; 0000 0087         LED_RED_SCORE3 =    1;
                 ; 0000 0088         LED_BLUE_SCORE1 =   1;
                 ; 0000 0089         LED_BLUE_SCORE2 =   1;
                 ; 0000 008A         LED_BLUE_SCORE3 =   1;
                 ; 0000 008B     }
                 ; 0000 008C     if(led == 4){
                 _0x94:
000182 e0e4      	LDI  R30,LOW(4)
000183 15ea      	CP   R30,R10
000184 f461      	BRNE _0xA9
                 ; 0000 008D         LED_SEG = number[red_scores/100];
000185 d151      	RCALL SUBOPT_0x14
000186 d12c      	RCALL SUBOPT_0xE
                 ; 0000 008E         LED_G = numberG[red_scores/100];
000187 d14f      	RCALL SUBOPT_0x14
000188 d12f      	RCALL SUBOPT_0xF
000189 f411      	BRNE _0xAA
00018a 98a8      	CBI  0x15,0
00018b c001      	RJMP _0xAB
                 _0xAA:
00018c 9aa8      	SBI  0x15,0
                 _0xAB:
                 ; 0000 008F         LED_TIME1 =         1;
00018d d151      	RCALL SUBOPT_0x15
                 ; 0000 0090         LED_TIME2 =         1;
                 ; 0000 0091         LED_TIME3 =         1;
                 ; 0000 0092         LED_RED_SCORE1 =    0;
00018e 9892      	CBI  0x12,2
                 ; 0000 0093         LED_RED_SCORE2 =    1;
00018f d151      	RCALL SUBOPT_0x16
                 ; 0000 0094         LED_RED_SCORE3 =    1;
                 ; 0000 0095         LED_BLUE_SCORE1 =   1;
000190 d153      	RCALL SUBOPT_0x17
                 ; 0000 0096         LED_BLUE_SCORE2 =   1;
                 ; 0000 0097         LED_BLUE_SCORE3 =   1;
                 ; 0000 0098     }
                 ; 0000 0099     if(led == 5){
                 _0xA9:
000191 e0e5      	LDI  R30,LOW(5)
000192 15ea      	CP   R30,R10
000193 f469      	BRNE _0xBE
                 ; 0000 009A         LED_SEG = number[(red_scores%100)/10];
000194 d153      	RCALL SUBOPT_0x18
000195 d11d      	RCALL SUBOPT_0xE
                 ; 0000 009B         LED_G = numberG[(red_scores%100)/10];
000196 d151      	RCALL SUBOPT_0x18
000197 d120      	RCALL SUBOPT_0xF
000198 f411      	BRNE _0xBF
000199 98a8      	CBI  0x15,0
00019a c001      	RJMP _0xC0
                 _0xBF:
00019b 9aa8      	SBI  0x15,0
                 _0xC0:
                 ; 0000 009C         LED_TIME1 =         1;
00019c d142      	RCALL SUBOPT_0x15
                 ; 0000 009D         LED_TIME2 =         1;
                 ; 0000 009E         LED_TIME3 =         1;
                 ; 0000 009F         LED_RED_SCORE1 =    1;
00019d 9a92      	SBI  0x12,2
                 ; 0000 00A0         LED_RED_SCORE2 =    0;
00019e 9891      	CBI  0x12,1
                 ; 0000 00A1         LED_RED_SCORE3 =    1;
00019f 9a97      	SBI  0x12,7
                 ; 0000 00A2         LED_BLUE_SCORE1 =   1;
0001a0 d143      	RCALL SUBOPT_0x17
                 ; 0000 00A3         LED_BLUE_SCORE2 =   1;
                 ; 0000 00A4         LED_BLUE_SCORE3 =   1;
                 ; 0000 00A5     }
                 ; 0000 00A6     if(led == 6){
                 _0xBE:
0001a1 e0e6      	LDI  R30,LOW(6)
0001a2 15ea      	CP   R30,R10
0001a3 f469      	BRNE _0xD3
                 ; 0000 00A7         LED_SEG = number[red_scores%10];
0001a4 d14f      	RCALL SUBOPT_0x19
0001a5 d10d      	RCALL SUBOPT_0xE
                 ; 0000 00A8         LED_G = numberG[red_scores%10];
0001a6 d14d      	RCALL SUBOPT_0x19
0001a7 d110      	RCALL SUBOPT_0xF
0001a8 f411      	BRNE _0xD4
0001a9 98a8      	CBI  0x15,0
0001aa c001      	RJMP _0xD5
                 _0xD4:
0001ab 9aa8      	SBI  0x15,0
                 _0xD5:
                 ; 0000 00A9         LED_TIME1 =         1;
0001ac d132      	RCALL SUBOPT_0x15
                 ; 0000 00AA         LED_TIME2 =         1;
                 ; 0000 00AB         LED_TIME3 =         1;
                 ; 0000 00AC         LED_RED_SCORE1 =    1;
0001ad 9a92      	SBI  0x12,2
                 ; 0000 00AD         LED_RED_SCORE2 =    1;
0001ae 9a91      	SBI  0x12,1
                 ; 0000 00AE         LED_RED_SCORE3 =    0;
0001af 9897      	CBI  0x12,7
                 ; 0000 00AF         LED_BLUE_SCORE1 =   1;
0001b0 d133      	RCALL SUBOPT_0x17
                 ; 0000 00B0         LED_BLUE_SCORE2 =   1;
                 ; 0000 00B1         LED_BLUE_SCORE3 =   1;
                 ; 0000 00B2     }
                 ; 0000 00B3     if(led == 7){
                 _0xD3:
0001b1 e0e7      	LDI  R30,LOW(7)
0001b2 15ea      	CP   R30,R10
0001b3 f471      	BRNE _0xE8
                 ; 0000 00B4         LED_SEG = number[blue_scores/100];
0001b4 d147      	RCALL SUBOPT_0x1A
0001b5 d0fd      	RCALL SUBOPT_0xE
                 ; 0000 00B5         LED_G = numberG[blue_scores/100];
0001b6 d145      	RCALL SUBOPT_0x1A
0001b7 d100      	RCALL SUBOPT_0xF
0001b8 f411      	BRNE _0xE9
0001b9 98a8      	CBI  0x15,0
0001ba c001      	RJMP _0xEA
                 _0xE9:
0001bb 9aa8      	SBI  0x15,0
                 _0xEA:
                 ; 0000 00B6         LED_TIME1 =         1;
0001bc d122      	RCALL SUBOPT_0x15
                 ; 0000 00B7         LED_TIME2 =         1;
                 ; 0000 00B8         LED_TIME3 =         1;
                 ; 0000 00B9         LED_RED_SCORE1 =    1;
0001bd 9a92      	SBI  0x12,2
                 ; 0000 00BA         LED_RED_SCORE2 =    1;
0001be d122      	RCALL SUBOPT_0x16
                 ; 0000 00BB         LED_RED_SCORE3 =    1;
                 ; 0000 00BC         LED_BLUE_SCORE1 =   0;
0001bf 98c6      	CBI  0x18,6
                 ; 0000 00BD         LED_BLUE_SCORE2 =   1;
0001c0 9a94      	SBI  0x12,4
                 ; 0000 00BE         LED_BLUE_SCORE3 =   1;
0001c1 9a93      	SBI  0x12,3
                 ; 0000 00BF     }
                 ; 0000 00C0     if(led == 8){
                 _0xE8:
0001c2 e0e8      	LDI  R30,LOW(8)
0001c3 15ea      	CP   R30,R10
0001c4 f471      	BRNE _0xFD
                 ; 0000 00C1         LED_SEG = number[(blue_scores%100)/10];
0001c5 d13e      	RCALL SUBOPT_0x1B
0001c6 d0ec      	RCALL SUBOPT_0xE
                 ; 0000 00C2         LED_G = numberG[(blue_scores%100)/10];
0001c7 d13c      	RCALL SUBOPT_0x1B
0001c8 d0ef      	RCALL SUBOPT_0xF
0001c9 f411      	BRNE _0xFE
0001ca 98a8      	CBI  0x15,0
0001cb c001      	RJMP _0xFF
                 _0xFE:
0001cc 9aa8      	SBI  0x15,0
                 _0xFF:
                 ; 0000 00C3         LED_TIME1 =         1;
0001cd d111      	RCALL SUBOPT_0x15
                 ; 0000 00C4         LED_TIME2 =         1;
                 ; 0000 00C5         LED_TIME3 =         1;
                 ; 0000 00C6         LED_RED_SCORE1 =    1;
0001ce 9a92      	SBI  0x12,2
                 ; 0000 00C7         LED_RED_SCORE2 =    1;
0001cf d111      	RCALL SUBOPT_0x16
                 ; 0000 00C8         LED_RED_SCORE3 =    1;
                 ; 0000 00C9         LED_BLUE_SCORE1 =   1;
0001d0 9ac6      	SBI  0x18,6
                 ; 0000 00CA         LED_BLUE_SCORE2 =   0;
0001d1 9894      	CBI  0x12,4
                 ; 0000 00CB         LED_BLUE_SCORE3 =   1;
0001d2 9a93      	SBI  0x12,3
                 ; 0000 00CC     }
                 ; 0000 00CD     if(led == 9){
                 _0xFD:
0001d3 e0e9      	LDI  R30,LOW(9)
0001d4 15ea      	CP   R30,R10
0001d5 f471      	BRNE _0x112
                 ; 0000 00CE         LED_SEG = number[blue_scores%10];
0001d6 d139      	RCALL SUBOPT_0x1C
0001d7 d0db      	RCALL SUBOPT_0xE
                 ; 0000 00CF         LED_G = numberG[blue_scores%10];
0001d8 d137      	RCALL SUBOPT_0x1C
0001d9 d0de      	RCALL SUBOPT_0xF
0001da f411      	BRNE _0x113
0001db 98a8      	CBI  0x15,0
0001dc c001      	RJMP _0x114
                 _0x113:
0001dd 9aa8      	SBI  0x15,0
                 _0x114:
                 ; 0000 00D0         LED_TIME1 =         1;
0001de d100      	RCALL SUBOPT_0x15
                 ; 0000 00D1         LED_TIME2 =         1;
                 ; 0000 00D2         LED_TIME3 =         1;
                 ; 0000 00D3         LED_RED_SCORE1 =    1;
0001df 9a92      	SBI  0x12,2
                 ; 0000 00D4         LED_RED_SCORE2 =    1;
0001e0 d100      	RCALL SUBOPT_0x16
                 ; 0000 00D5         LED_RED_SCORE3 =    1;
                 ; 0000 00D6         LED_BLUE_SCORE1 =   1;
0001e1 9ac6      	SBI  0x18,6
                 ; 0000 00D7         LED_BLUE_SCORE2 =   1;
0001e2 9a94      	SBI  0x12,4
                 ; 0000 00D8         LED_BLUE_SCORE3 =   0;
0001e3 9893      	CBI  0x12,3
                 ; 0000 00D9     }
                 ; 0000 00DA 
                 ; 0000 00DB     led++;
                 _0x112:
0001e4 94a3      	INC  R10
                 ; 0000 00DC     if(led == 10)
0001e5 e0ea      	LDI  R30,LOW(10)
0001e6 15ea      	CP   R30,R10
0001e7 f411      	BRNE _0x127
                 ; 0000 00DD         led = 1;
0001e8 e0e1      	LDI  R30,LOW(1)
0001e9 2eae      	MOV  R10,R30
                 ; 0000 00DE }
                 _0x127:
0001ea 91e9      	LD   R30,Y+
0001eb bfef      	OUT  SREG,R30
0001ec 91f9      	LD   R31,Y+
0001ed 91e9      	LD   R30,Y+
0001ee 91b9      	LD   R27,Y+
0001ef 91a9      	LD   R26,Y+
0001f0 9199      	LD   R25,Y+
0001f1 9019      	LD   R1,Y+
0001f2 9009      	LD   R0,Y+
0001f3 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM2_OVF] void timer2_interrupt(){
                 ; 0000 00E0 interrupt [6] void timer2_interrupt(){
                 _timer2_interrupt:
                 ; .FSTART _timer2_interrupt
0001f4 920a      	ST   -Y,R0
0001f5 921a      	ST   -Y,R1
0001f6 92fa      	ST   -Y,R15
0001f7 936a      	ST   -Y,R22
0001f8 937a      	ST   -Y,R23
0001f9 938a      	ST   -Y,R24
0001fa 939a      	ST   -Y,R25
0001fb 93aa      	ST   -Y,R26
0001fc 93ba      	ST   -Y,R27
0001fd 93ea      	ST   -Y,R30
0001fe 93fa      	ST   -Y,R31
0001ff b7ef      	IN   R30,SREG
000200 93ea      	ST   -Y,R30
                 ; 0000 00E1     TCNT2 = 0xB2;
000201 ebe2      	LDI  R30,LOW(178)
000202 bde4      	OUT  0x24,R30
                 ; 0000 00E2     milisecond--;
000203 946a      	DEC  R6
                 ; 0000 00E3     a++;
000204 e7a9      	LDI  R26,LOW(_a)
000205 e0b1      	LDI  R27,HIGH(_a)
000206 91ed      	LD   R30,X+
000207 91fd      	LD   R31,X+
000208 9631      	ADIW R30,1
000209 93fe      	ST   -X,R31
00020a 93ee      	ST   -X,R30
                 ; 0000 00E4     if(a == 40)
00020b 91a0 0179 	LDS  R26,_a
00020d 91b0 017a 	LDS  R27,_a+1
00020f 9798      	SBIW R26,40
000210 f429      	BRNE _0x128
                 ; 0000 00E5         a = 0;
000211 e0e0      	LDI  R30,LOW(0)
000212 93e0 0179 	STS  _a,R30
000214 93e0 017a 	STS  _a+1,R30
                 ; 0000 00E6 
                 ; 0000 00E7     if(milisecond == 0){
                 _0x128:
000216 2066      	TST  R6
000217 f419      	BRNE _0x129
                 ; 0000 00E8         second--;
000218 94ba      	DEC  R11
                 ; 0000 00E9         milisecond = 100;
000219 e6e4      	LDI  R30,LOW(100)
00021a 2e6e      	MOV  R6,R30
                 ; 0000 00EA     }
                 ; 0000 00EB     if(second == 0){
                 _0x129:
00021b 20bb      	TST  R11
00021c f409      	BRNE _0x12A
                 ; 0000 00EC         stop_game();
00021d df1d      	RCALL _stop_game
                 ; 0000 00ED     }
                 ; 0000 00EE }
                 _0x12A:
00021e 91e9      	LD   R30,Y+
00021f bfef      	OUT  SREG,R30
000220 91f9      	LD   R31,Y+
000221 91e9      	LD   R30,Y+
000222 91b9      	LD   R27,Y+
000223 91a9      	LD   R26,Y+
000224 9199      	LD   R25,Y+
000225 9189      	LD   R24,Y+
000226 9179      	LD   R23,Y+
000227 9169      	LD   R22,Y+
000228 90f9      	LD   R15,Y+
000229 9019      	LD   R1,Y+
00022a 9009      	LD   R0,Y+
00022b 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void){
                 ; 0000 00F0 void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 00F1 
                 ; 0000 00F2 DDRB = 0xFF;
00022c efef      	LDI  R30,LOW(255)
00022d bbe7      	OUT  0x17,R30
                 ; 0000 00F3 PORTB= 0xC0;
00022e ece0      	LDI  R30,LOW(192)
00022f bbe8      	OUT  0x18,R30
                 ; 0000 00F4 
                 ; 0000 00F5 DDRD = 0xFF;
000230 efef      	LDI  R30,LOW(255)
000231 bbe1      	OUT  0x11,R30
                 ; 0000 00F6 PORTD= 0xFF;
000232 bbe2      	OUT  0x12,R30
                 ; 0000 00F7 
                 ; 0000 00F8 DDRC = 0x27;
000233 e2e7      	LDI  R30,LOW(39)
000234 bbe4      	OUT  0x14,R30
                 ; 0000 00F9 PORTC = 0xFF;
000235 efef      	LDI  R30,LOW(255)
000236 bbe5      	OUT  0x15,R30
                 ; 0000 00FA 
                 ; 0000 00FB //2.912ms
                 ; 0000 00FC TCCR0=(0<<CS02) | (1<<CS01) | (1<<CS00);
000237 e0e3      	LDI  R30,LOW(3)
000238 bfe3      	OUT  0x33,R30
                 ; 0000 00FD TCNT0=0x06;
000239 e0e6      	LDI  R30,LOW(6)
00023a bfe2      	OUT  0x32,R30
                 ; 0000 00FE 
                 ; 0000 00FF 
                 ; 0000 0100 //10ms
                 ; 0000 0101 ASSR=0<<AS2;
00023b e0e0      	LDI  R30,LOW(0)
00023c bde2      	OUT  0x22,R30
                 ; 0000 0102 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
00023d e0e7      	LDI  R30,LOW(7)
00023e bde5      	OUT  0x25,R30
                 ; 0000 0103 TCNT2=0xB2;
00023f ebe2      	LDI  R30,LOW(178)
000240 bde4      	OUT  0x24,R30
                 ; 0000 0104 OCR2=0x00;
000241 e0e0      	LDI  R30,LOW(0)
000242 bde3      	OUT  0x23,R30
                 ; 0000 0105 
                 ; 0000 0106 
                 ; 0000 0107 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
000243 e0e1      	LDI  R30,LOW(1)
000244 bfe9      	OUT  0x39,R30
                 ; 0000 0108 
                 ; 0000 0109 #asm("sei")
000245 9478      	sei
                 ; 0000 010A 
                 ; 0000 010B Common_Config();
000246 de61      	RCALL _Common_Config
                 ; 0000 010C delay_us(10);
000247 d042      	RCALL SUBOPT_0x5
                 ; 0000 010D Common_Init();
000248 de7c      	RCALL _Common_Init
                 ; 0000 010E delay_us(10);
000249 d040      	RCALL SUBOPT_0x5
                 ; 0000 010F RX_Config();
00024a de85      	RCALL _RX_Config
                 ; 0000 0110 delay_us(10);
00024b d03e      	RCALL SUBOPT_0x5
                 ; 0000 0111 RX_Mode();
00024c de80      	RCALL _RX_Mode
                 ; 0000 0112 
                 ; 0000 0113 
                 ; 0000 0114 while (1){
                 _0x12B:
                 ; 0000 0115     RX_Config();
00024d de82      	RCALL _RX_Config
                 ; 0000 0116     if(IRQ == 0){
00024e 999b      	SBIC 0x13,3
00024f c023      	RJMP _0x12E
                 ; 0000 0117         RX_Read();
000250 de85      	RCALL _RX_Read
                 ; 0000 0118         if(score == 9)
000251 e0e9      	LDI  R30,LOW(9)
000252 e0f0      	LDI  R31,HIGH(9)
000253 d042      	RCALL SUBOPT_0x8
000254 f411      	BRNE _0x12F
                 ; 0000 0119             reset_game();
000255 def0      	RCALL _reset_game
                 ; 0000 011A         else if(score == 10){
000256 c006      	RJMP _0x130
                 _0x12F:
000257 e0ea      	LDI  R30,LOW(10)
000258 e0f0      	LDI  R31,HIGH(10)
000259 d03c      	RCALL SUBOPT_0x8
00025a f411      	BRNE _0x131
                 ; 0000 011B             start_game();
00025b dee4      	RCALL _start_game
                 ; 0000 011C             RX_Config();
00025c de73      	RCALL _RX_Config
                 ; 0000 011D         }
                 ; 0000 011E         if(!time_out){
                 _0x131:
                 _0x130:
00025d 91e0 0178 	LDS  R30,_time_out
00025f 30e0      	CPI  R30,0
000260 f421      	BRNE _0x132
                 ; 0000 011F             get_score();
000261 de8c      	RCALL _get_score
                 ; 0000 0120             delay_ms(500);
000262 efa4      	LDI  R26,LOW(500)
000263 e0b1      	LDI  R27,HIGH(500)
000264 d0b8      	RCALL _delay_ms
                 ; 0000 0121         }
                 ; 0000 0122 
                 ; 0000 0123         if(check_finish(red_score)){
                 _0x132:
000265 2dad      	MOV  R26,R13
000266 de7e      	RCALL _check_finish
000267 30e0      	CPI  R30,0
000268 f019      	BREQ _0x133
                 ; 0000 0124             TIMSK = (0<<TOIE2) | (1<<TOIE0);
000269 d0ae      	RCALL SUBOPT_0x1D
                 ; 0000 0125             red_scores = 999;
00026a d03d      	RCALL SUBOPT_0xC
                 ; 0000 0126             stop_game();
00026b decf      	RCALL _stop_game
                 ; 0000 0127         }
                 ; 0000 0128         if(check_finish(blue_score)){
                 _0x133:
00026c 2dac      	MOV  R26,R12
00026d de77      	RCALL _check_finish
00026e 30e0      	CPI  R30,0
00026f f019      	BREQ _0x134
                 ; 0000 0129             TIMSK = (0<<TOIE2) | (1<<TOIE0);
000270 d0a7      	RCALL SUBOPT_0x1D
                 ; 0000 012A             blue_scores = 999;
000271 d02c      	RCALL SUBOPT_0xA
                 ; 0000 012B             stop_game();
000272 dec8      	RCALL _stop_game
                 ; 0000 012C         }
                 ; 0000 012D     }
                 _0x134:
                 ; 0000 012E     RX_Config();
                 _0x12E:
000273 de5c      	RCALL _RX_Config
                 ; 0000 012F }
000274 cfd8      	RJMP _0x12B
                 ; 0000 0130 }
                 _0x135:
000275 cfff      	RJMP _0x135
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _number:
000160           	.BYTE 0xA
                 _numberG:
00016a           	.BYTE 0xA
                 _red_scores:
000174           	.BYTE 0x2
                 _blue_scores:
000176           	.BYTE 0x2
                 _time_out:
000178           	.BYTE 0x1
                 _a:
000179           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
                +
000276 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000277 958a     +DEC R24
000278 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000279 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
00027a 9aad      	SBI  0x15,5
00027b dffa      	RCALL SUBOPT_0x0
00027c e0e0      	LDI  R30,0
00027d 999c      	SBIC 0x13,4
00027e e0e1      	LDI  R30,1
00027f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000280 93aa      	ST   -Y,R26
000281 98a9      	CBI  0x15,1
000282 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000283 81a8      	LD   R26,Y
000284 cdd7      	RJMP _SPI_Write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
000285 9aa9      	SBI  0x15,1
                +
000286 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000287 958a     +DEC R24
000288 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000289 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
                +
00028a e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00028b 958a     +DEC R24
00028c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
00028d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
00028e e0e7      	LDI  R30,LOW(7)
00028f 93ea      	ST   -Y,R30
000290 e7ae      	LDI  R26,LOW(126)
000291 cdf6      	RJMP _RF_Write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000292 e0e0      	LDI  R30,LOW(0)
000293 93ea      	ST   -Y,R30
000294 e1af      	LDI  R26,LOW(31)
000295 cdf2      	RJMP _RF_Write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
000296 15e8      	CP   R30,R8
000297 05f9      	CPC  R31,R9
000298 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
000299 91e0 0176 	LDS  R30,_blue_scores
00029b 91f0 0177 	LDS  R31,_blue_scores+1
00029d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xA:
00029e 93e0 0176 	STS  _blue_scores,R30
0002a0 93f0 0177 	STS  _blue_scores+1,R31
0002a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
0002a3 91e0 0174 	LDS  R30,_red_scores
0002a5 91f0 0175 	LDS  R31,_red_scores+1
0002a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xC:
0002a8 93e0 0174 	STS  _red_scores,R30
0002aa 93f0 0175 	STS  _red_scores+1,R31
0002ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
0002ad 2dab      	MOV  R26,R11
0002ae e0b0      	LDI  R27,0
0002af e6e4      	LDI  R30,LOW(100)
0002b0 e0f0      	LDI  R31,HIGH(100)
0002b1 d08c      	RCALL __DIVW21
0002b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xE:
0002b3 5ae0      	SUBI R30,LOW(-_number)
0002b4 4ffe      	SBCI R31,HIGH(-_number)
0002b5 81e0      	LD   R30,Z
0002b6 bbe8      	OUT  0x18,R30
0002b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xF:
0002b8 59e6      	SUBI R30,LOW(-_numberG)
0002b9 4ffe      	SBCI R31,HIGH(-_numberG)
0002ba 81e0      	LD   R30,Z
0002bb 30e0      	CPI  R30,0
0002bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x10:
0002bd 9a95      	SBI  0x12,5
0002be 9ac7      	SBI  0x18,7
0002bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x11:
0002c0 9a92      	SBI  0x12,2
0002c1 9a91      	SBI  0x12,1
0002c2 9a97      	SBI  0x12,7
0002c3 9ac6      	SBI  0x18,6
0002c4 9a94      	SBI  0x12,4
0002c5 9a93      	SBI  0x12,3
0002c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x12:
0002c7 2dab      	MOV  R26,R11
0002c8 27bb      	CLR  R27
0002c9 e6e4      	LDI  R30,LOW(100)
0002ca e0f0      	LDI  R31,HIGH(100)
0002cb d077      	RCALL __MODW21
0002cc 01df      	MOVW R26,R30
0002cd e0ea      	LDI  R30,LOW(10)
0002ce e0f0      	LDI  R31,HIGH(10)
0002cf d06e      	RCALL __DIVW21
0002d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x13:
0002d1 2dab      	MOV  R26,R11
0002d2 27bb      	CLR  R27
0002d3 e0ea      	LDI  R30,LOW(10)
0002d4 e0f0      	LDI  R31,HIGH(10)
0002d5 d06d      	RCALL __MODW21
0002d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x14:
0002d7 91a0 0174 	LDS  R26,_red_scores
0002d9 91b0 0175 	LDS  R27,_red_scores+1
0002db e6e4      	LDI  R30,LOW(100)
0002dc e0f0      	LDI  R31,HIGH(100)
0002dd d060      	RCALL __DIVW21
0002de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
0002df 9a96      	SBI  0x12,6
0002e0 cfdc      	RJMP SUBOPT_0x10
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
0002e1 9a91      	SBI  0x12,1
0002e2 9a97      	SBI  0x12,7
0002e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x17:
0002e4 9ac6      	SBI  0x18,6
0002e5 9a94      	SBI  0x12,4
0002e6 9a93      	SBI  0x12,3
0002e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x18:
0002e8 91a0 0174 	LDS  R26,_red_scores
0002ea 91b0 0175 	LDS  R27,_red_scores+1
0002ec e6e4      	LDI  R30,LOW(100)
0002ed e0f0      	LDI  R31,HIGH(100)
0002ee d054      	RCALL __MODW21
0002ef 01df      	MOVW R26,R30
0002f0 e0ea      	LDI  R30,LOW(10)
0002f1 e0f0      	LDI  R31,HIGH(10)
0002f2 d04b      	RCALL __DIVW21
0002f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x19:
0002f4 91a0 0174 	LDS  R26,_red_scores
0002f6 91b0 0175 	LDS  R27,_red_scores+1
0002f8 e0ea      	LDI  R30,LOW(10)
0002f9 e0f0      	LDI  R31,HIGH(10)
0002fa d048      	RCALL __MODW21
0002fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1A:
0002fc 91a0 0176 	LDS  R26,_blue_scores
0002fe 91b0 0177 	LDS  R27,_blue_scores+1
000300 e6e4      	LDI  R30,LOW(100)
000301 e0f0      	LDI  R31,HIGH(100)
000302 d03b      	RCALL __DIVW21
000303 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1B:
000304 91a0 0176 	LDS  R26,_blue_scores
000306 91b0 0177 	LDS  R27,_blue_scores+1
000308 e6e4      	LDI  R30,LOW(100)
000309 e0f0      	LDI  R31,HIGH(100)
00030a d038      	RCALL __MODW21
00030b 01df      	MOVW R26,R30
00030c e0ea      	LDI  R30,LOW(10)
00030d e0f0      	LDI  R31,HIGH(10)
00030e d02f      	RCALL __DIVW21
00030f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1C:
000310 91a0 0176 	LDS  R26,_blue_scores
000312 91b0 0177 	LDS  R27,_blue_scores+1
000314 e0ea      	LDI  R30,LOW(10)
000315 e0f0      	LDI  R31,HIGH(10)
000316 d02c      	RCALL __MODW21
000317 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
000318 e0e1      	LDI  R30,LOW(1)
000319 bfe9      	OUT  0x39,R30
00031a eee7      	LDI  R30,LOW(999)
00031b e0f3      	LDI  R31,HIGH(999)
00031c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00031d 9610      	adiw r26,0
00031e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00031f ed80     +LDI R24 , LOW ( 0x7D0 )
000320 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000321 9701     +SBIW R24 , 1
000322 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000323 95a8      	wdr
000324 9711      	sbiw r26,1
000325 f7c9      	brne __delay_ms0
                 __delay_ms1:
000326 9508      	ret
                 
                 __ANEGW1:
000327 95f1      	NEG  R31
000328 95e1      	NEG  R30
000329 40f0      	SBCI R31,0
00032a 9508      	RET
                 
                 __DIVW21U:
00032b 2400      	CLR  R0
00032c 2411      	CLR  R1
00032d e190      	LDI  R25,16
                 __DIVW21U1:
00032e 0faa      	LSL  R26
00032f 1fbb      	ROL  R27
000330 1c00      	ROL  R0
000331 1c11      	ROL  R1
000332 1a0e      	SUB  R0,R30
000333 0a1f      	SBC  R1,R31
000334 f418      	BRCC __DIVW21U2
000335 0e0e      	ADD  R0,R30
000336 1e1f      	ADC  R1,R31
000337 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000338 60a1      	SBR  R26,1
                 __DIVW21U3:
000339 959a      	DEC  R25
00033a f799      	BRNE __DIVW21U1
00033b 01fd      	MOVW R30,R26
00033c 01d0      	MOVW R26,R0
00033d 9508      	RET
                 
                 __DIVW21:
00033e d012      	RCALL __CHKSIGNW
00033f dfeb      	RCALL __DIVW21U
000340 f40e      	BRTC __DIVW211
000341 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000342 9508      	RET
                 
                 __MODW21:
000343 94e8      	CLT
000344 ffb7      	SBRS R27,7
000345 c004      	RJMP __MODW211
000346 95a0      	COM  R26
000347 95b0      	COM  R27
000348 9611      	ADIW R26,1
000349 9468      	SET
                 __MODW211:
00034a fdf7      	SBRC R31,7
00034b dfdb      	RCALL __ANEGW1
00034c dfde      	RCALL __DIVW21U
00034d 01fd      	MOVW R30,R26
00034e f40e      	BRTC __MODW212
00034f dfd7      	RCALL __ANEGW1
                 __MODW212:
000350 9508      	RET
                 
                 __CHKSIGNW:
000351 94e8      	CLT
000352 fff7      	SBRS R31,7
000353 c002      	RJMP __CHKSW1
000354 dfd2      	RCALL __ANEGW1
000355 9468      	SET
                 __CHKSW1:
000356 ffb7      	SBRS R27,7
000357 c006      	RJMP __CHKSW2
000358 95a0      	COM  R26
000359 95b0      	COM  R27
00035a 9611      	ADIW R26,1
00035b f800      	BLD  R0,0
00035c 9403      	INC  R0
00035d fa00      	BST  R0,0
                 __CHKSW2:
00035e 9508      	RET
                 
                 __SAVELOCR2:
00035f 931a      	ST   -Y,R17
000360 930a      	ST   -Y,R16
000361 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :  16 r1 :   9 r2 :   0 r3 :   0 r4 :   1 r5 :   0 r6 :   3 r7 :   1 
r8 :   2 r9 :   2 r10:  12 r11:   5 r12:   5 r13:   2 r14:   0 r15:   2 
r16:   5 r17:  11 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  19 r25:  10 r26:  62 r27:  24 r28:   3 r29:   1 r30: 201 r31:  45 
x  :   7 y  :  68 z  :   9 
Registers used: 27 out of 35 (77.1%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :  14 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  45 brpl  :   0 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 cbi   :  28 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   7 
cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 cp    :  11 
cpc   :   1 cpi   :   7 cpse  :   0 dec   :   7 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 
inc   :   2 ld    :  29 ldd   :   7 ldi   : 141 lds   :  19 lpm   :   7 
lsl   :   3 lsr   :   0 mov   :  13 movw  :   9 mul   :   0 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   7 ori   :   2 out   :  28 
pop   :   0 push  :   0 rcall : 164 ret   :  43 reti  :   2 rjmp  :  59 
rol   :   3 ror   :   0 sbc   :   1 sbci  :   3 sbi   :  49 sbic  :   2 
sbis  :   0 sbiw  :   7 sbr   :   1 sbrc  :   1 sbrs  :   3 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   2 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  39 std   :   2 
sts   :   8 sub   :   1 subi  :   4 swap  :   0 tst   :   2 wdr   :   1 

Instructions used: 56 out of 114 (49.1%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006c4   1674     58   1732    8192  21.1%
[.dseg] 0x000060 0x00017b      0     27     27    1024   2.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
