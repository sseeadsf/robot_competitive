
typedef struct
{
    float color;
    float score; 
}match_info;

match_info data;

unsigned char SPI_RW_TX(unsigned char Buff){
    unsigned char bit_ctr;
       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
       {
        MOSI = (Buff & 0x80);         // output 'uchar', MSB to MOSI    
        delay_us(5);
        Buff = (Buff << 1);           // shift next bit into MSB..
        SCK = 1;                      // Set SCK high..          
        delay_us(5);
        Buff |= MISO;                 // capture current MISO bit
        SCK = 0;                      // ..then set SCK low again
       }
    return(Buff);                     // return read uchar
}

void RF_Init_TX()                                                    //Function allow to Initialize RF device
{ 
    CE=1;
    delay_us(700);
    CE=0;
    CSN=1;
}

void RF_Command_TX(unsigned char command)                            //Function to write a command
{
    CSN=0;
    SPI_RW_TX(command);
    CSN=1;
    delay_us(10);
}


void RF_Write_TX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
{
    CSN=0;
    SPI_RW_TX(0b00100000|Reg_Add);
    SPI_RW_TX(Value);
    CSN=1;
    delay_us(10);
}

void config()
{
    CE=0;    // chip enable
    CSN=1;   // Spi disable
    SCK=0;   // Spi clock line init high
    delay_us(10);
    RF_Write_TX(0x07,0b01111110);  // Clear flag
    RF_Command_TX(0b11100010);     //Flush RX   
    RF_Write_TX(0x00,0b00011111);     //CONFIG 0x00
    delay_ms(2);
    RF_Write_TX(0x07,0b01111110);     // status
    RF_Write_TX(0x1D, 0b00000100);
    RF_Write_TX(0x05,0b00000010);     //RF_CH 0x05        Choose frequency channel
    RF_Write_TX(0x06, 0b00000110);
}


void RF_Mode_TX()                                             //Function to put nRF in TX mode
{
    CE=0;
    RF_Write_TX(0x00,0b00011110);     //CONFIG 0x00
}

void RF_Write_Address_TX(unsigned char Address)                      //Function to write TX and RX address
{
    CSN=0;
    RF_Write_TX(0x03,0b00000011);
    CSN=1;
    delay_us(10);
    CSN=0;
    SPI_RW_TX(0b00100000|0x0A);     
    SPI_RW_TX(Code_tay_cam);
    SPI_RW_TX(Address);
    SPI_RW_TX(Address);
    SPI_RW_TX(Address);
    SPI_RW_TX(Address);
    CSN=1;
    delay_us(10);
    CSN=0;
    SPI_RW_TX(0b00100000|0x10);   
    SPI_RW_TX(Code_tay_cam);
    SPI_RW_TX(Address);
    SPI_RW_TX(Address);
    SPI_RW_TX(Address);
    SPI_RW_TX(Address);
  
    CSN=1;
    delay_us(10);
}


void RF_Config_TX()                                                  //Function to config the nRF
{
    RF_Write_TX(0x07,0b01111110);  // Clear flag
    RF_Command_TX(0b11100010);
    RF_Write_TX(0x1C,0b00000001); 
    RF_Write_Address_TX(P_Add);
    RF_Write_TX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
    RF_Write_TX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
}


void RF_Send_TX(match_info send)     //Function to send data Value to a specify RX Address
{

    RF_Write_Address_TX(P_Add);
    CSN=1;
    delay_us(10);
    CSN=0;
    SPI_RW_TX(0b11100001);
    CSN=1;
    delay_us(10);
    CSN=0;
    SPI_RW_TX(0b10100000);
    SPI_RW_TX(send.color); 
    SPI_RW_TX(send.score);
    CSN=1;
    CE=1;
    delay_us(500);
    CE=0;
    RF_Write_TX(0x07,0b01111110);
    RF_Write_Address_TX(P_Add);
    RF_Command_TX(0b11100001);  
}
