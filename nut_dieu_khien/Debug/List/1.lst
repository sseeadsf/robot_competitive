
AVRASM ver. 2.1.30  D:\Embedded\ATmega\thi_robot_new\nut_dieu_khien\Debug\List\1.asm Sat Jan 27 16:52:35 2018

D:\Embedded\ATmega\thi_robot_new\nut_dieu_khien\Debug\List\1.asm(1086): warning: Register r5 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\nut_dieu_khien\Debug\List\1.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\nut_dieu_khien\Debug\List\1.asm(1088): warning: Register r7 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\nut_dieu_khien\Debug\List\1.asm(1089): warning: Register r8 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\nut_dieu_khien\Debug\List\1.asm(1090): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Send_Add=R5
                 	.DEF _Receive_Add=R4
                 	.DEF _Salt_Add=R7
                 	.DEF _score=R8
                 	.DEF _score_msb=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c018      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000013 b1b1
000014 ab00      	.DB  0xB1,0xB1,0x0,0xAB
                 
                 
                 __GLOBAL_INI_TBL:
000015 0004      	.DW  0x04
000016 0004      	.DW  0x04
000017 0026      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000018 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000019 94f8      	CLI
00001a 27ee      	CLR  R30
00001b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00001c e0f1      	LDI  R31,1
00001d bffb      	OUT  GICR,R31
00001e bfeb      	OUT  GICR,R30
00001f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000020 e08d      	LDI  R24,(14-2)+1
000021 e0a2      	LDI  R26,2
000022 27bb      	CLR  R27
                 __CLEAR_REG:
000023 93ed      	ST   X+,R30
000024 958a      	DEC  R24
000025 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000026 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000027 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000028 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000029 93ed      	ST   X+,R30
00002a 9701      	SBIW R24,1
00002b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00002c e2ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00002d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00002e 9185      	LPM  R24,Z+
00002f 9195      	LPM  R25,Z+
000030 9700      	SBIW R24,0
000031 f061      	BREQ __GLOBAL_INI_END
000032 91a5      	LPM  R26,Z+
000033 91b5      	LPM  R27,Z+
000034 9005      	LPM  R0,Z+
000035 9015      	LPM  R1,Z+
000036 01bf      	MOVW R22,R30
000037 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000038 9005      	LPM  R0,Z+
000039 920d      	ST   X+,R0
00003a 9701      	SBIW R24,1
00003b f7e1      	BRNE __GLOBAL_INI_LOOP
00003c 01fb      	MOVW R30,R22
00003d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00003e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00003f bfed      	OUT  SPL,R30
000040 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000041 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000042 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000043 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000044 c095      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <io.h>
                 ;#include <delay.h>
                 ;
                 ;#define CE      PORTD.2
                 ;#define SCK     PORTD.3
                 ;#define MISO    PIND.4
                 ;#define CSN     PORTD.7
                 ;#define MOSI    PORTD.6
                 ;#define IRQ     PIND.5
                 ;#define Led PORTC.5
                 ;char Send_Add = 0xB1, Receive_Add = 0xB1, Salt_Add = 0xAB;
                 ;int score;
                 ;#include "rf.c"
                 ;#define CONFIG      	0x00
                 ;#define EN_AA       	0x01
                 ;#define EN_RXADDR   	0x02
                 ;#define SETUP_AW    	0x03
                 ;#define SETUP_RETR  	0x04
                 ;#define RF_CH       	0x05
                 ;#define RF_SETUP    	0x06
                 ;#define STATUS  		0x07
                 ;#define OBSERVE_TX  	0x08
                 ;#define RPD          	0x09
                 ;#define RX_ADDR_P0  	0x0A
                 ;#define RX_ADDR_P1  	0x0B
                 ;#define RX_ADDR_P2  	0x0C
                 ;#define RX_ADDR_P3  	0x0D
                 ;#define RX_ADDR_P4  	0x0E
                 ;#define RX_ADDR_P5  	0x0F
                 ;#define TX_ADDR     	0x10
                 ;#define RX_PW_P0    	0x11
                 ;#define RX_PW_P1    	0x12
                 ;#define RX_PW_P2    	0x13
                 ;#define RX_PW_P3    	0x14
                 ;#define RX_PW_P4    	0x15
                 ;#define RX_PW_P5    	0x16
                 ;#define FIFO_STATUS 	0x17
                 ;#define DYNPD	    	0x1C
                 ;#define FEATURE	    	0x1D
                 ;
                 ;void SPI_Write(unsigned char Buff){
                 ; 0000 000F void SPI_Write(unsigned char Buff){
                 
                 	.CSEG
                 _SPI_Write:
                 ; .FSTART _SPI_Write
                 ;    unsigned char bit_ctr;
                 ;    for(bit_ctr=0;bit_ctr<8;bit_ctr++){
000045 93aa      	ST   -Y,R26
000046 931a      	ST   -Y,R17
                 ;	Buff -> Y+1
                 ;	bit_ctr -> R17
000047 e010      	LDI  R17,LOW(0)
                 _0x4:
000048 3018      	CPI  R17,8
000049 f4c8      	BRSH _0x5
                 ;        MOSI = (Buff & 0x80);
00004a 81e9      	LDD  R30,Y+1
00004b 78e0      	ANDI R30,LOW(0x80)
00004c f411      	BRNE _0x6
00004d 9896      	CBI  0x12,6
00004e c001      	RJMP _0x7
                 _0x6:
00004f 9a96      	SBI  0x12,6
                 _0x7:
                 ;        delay_us(5);
                +
000050 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000051 958a     +DEC R24
000052 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ;        Buff = (Buff << 1);
000053 81e9      	LDD  R30,Y+1
000054 0fee      	LSL  R30
000055 83e9      	STD  Y+1,R30
                 ;        SCK = 1;
000056 9a93      	SBI  0x12,3
                 ;        delay_us(5);
                +
000057 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000058 958a     +DEC R24
000059 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ;        Buff |= MISO;
00005a e0e0      	LDI  R30,0
00005b 9984      	SBIC 0x10,4
00005c e0e1      	LDI  R30,1
00005d 81a9      	LDD  R26,Y+1
00005e 2bea      	OR   R30,R26
00005f 83e9      	STD  Y+1,R30
                 ;        SCK = 0;
000060 9893      	CBI  0x12,3
                 ;    }
000061 5f1f      	SUBI R17,-1
000062 cfe5      	RJMP _0x4
                 _0x5:
                 ;}
000063 8118      	LDD  R17,Y+0
000064 c016      	RJMP _0x2000004
                 ; .FEND
                 ;
                 ;unsigned char SPI_Read(void){
                 ;    unsigned char Buff=0;
                 ;    unsigned char bit_ctr;
                 ;    for(bit_ctr=0;bit_ctr<8;bit_ctr++){
                 ;	Buff -> R17
                 ;	bit_ctr -> R16
                 ;        delay_us(5);
                 ;        Buff = (Buff << 1);
                 ;        SCK = 1;
                 ;        delay_us(5);
                 ;        Buff |= MISO;
                 ;        SCK = 0;
                 ;    }
                 ;    return(Buff);
                 ;}
                 ;
                 ;
                 ;void RF_Command(unsigned char command){
                 _RF_Command:
                 ; .FSTART _RF_Command
                 ;    CSN=0;
000065 d092      	RCALL SUBOPT_0x0
                 ;	command -> Y+0
                 ;    SPI_Write(command);
000066 d094      	RCALL SUBOPT_0x1
                 ;    CSN=1;
000067 d095      	RCALL SUBOPT_0x2
                 ;    delay_us(10);
                 ;}
000068 c01f      	RJMP _0x2000002
                 ; .FEND
                 ;
                 ;
                 ;void RF_Write(unsigned char Reg_Add, unsigned char Value){
                 _RF_Write:
                 ; .FSTART _RF_Write
                 ;    CSN=0;
000069 d08e      	RCALL SUBOPT_0x0
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_Write(0b00100000|Reg_Add);
00006a 81e9      	LDD  R30,Y+1
00006b 62e0      	ORI  R30,0x20
00006c 2fae      	MOV  R26,R30
00006d c00a      	RJMP _0x2000003
                 ;    SPI_Write(Value);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;}
                 ; .FEND
                 ;
                 ;void RF_Write_Add(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
                 ;{
                 _RF_Write_Add:
                 ; .FSTART _RF_Write_Add
                 ;    CSN=0;
00006e d089      	RCALL SUBOPT_0x0
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_Write(0b00100000|Reg_Add);
00006f 81e9      	LDD  R30,Y+1
000070 62e0      	ORI  R30,0x20
000071 2fae      	MOV  R26,R30
000072 dfd2      	RCALL _SPI_Write
                 ;    SPI_Write(Salt_Add);
000073 2da7      	MOV  R26,R7
000074 dfd0      	RCALL _SPI_Write
                 ;    SPI_Write(Value);
000075 d085      	RCALL SUBOPT_0x1
                 ;    SPI_Write(Value);
000076 d084      	RCALL SUBOPT_0x1
                 ;    SPI_Write(Value);
000077 81a8      	LD   R26,Y
                 _0x2000003:
000078 dfcc      	RCALL _SPI_Write
                 ;    SPI_Write(Value);
000079 d081      	RCALL SUBOPT_0x1
                 ;    CSN=1;
00007a d082      	RCALL SUBOPT_0x2
                 ;    delay_us(10);
                 ;}
                 _0x2000004:
00007b 9622      	ADIW R28,2
00007c 9508      	RET
                 ; .FEND
                 ;
                 ;void TX_Address(unsigned char Address){
                 _TX_Address:
                 ; .FSTART _TX_Address
                 ;    CSN=0;
00007d d07a      	RCALL SUBOPT_0x0
                 ;	Address -> Y+0
                 ;    RF_Write(SETUP_AW,0b00000011);
00007e e0e3      	LDI  R30,LOW(3)
00007f 93ea      	ST   -Y,R30
000080 e0a3      	LDI  R26,LOW(3)
000081 dfe7      	RCALL _RF_Write
                 ;    CSN=1;
000082 d07a      	RCALL SUBOPT_0x2
                 ;    delay_us(10);
                 ;    CSN=0;
000083 9897      	CBI  0x12,7
                 ;    //RF_Write_Add(RX_ADDR_P0, Address);
                 ;    RF_Write_Add(TX_ADDR, Address);
000084 e1e0      	LDI  R30,LOW(16)
000085 93ea      	ST   -Y,R30
000086 81a9      	LDD  R26,Y+1
000087 dfe6      	RCALL _RF_Write_Add
                 ;}
                 _0x2000002:
000088 9621      	ADIW R28,1
000089 9508      	RET
                 ; .FEND
                 ;
                 ;void RX_Address(unsigned char Address){
                 ;    CSN=0;
                 ;	Address -> Y+0
                 ;    RF_Write(SETUP_AW,0b00000011);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    RF_Write_Add(RX_ADDR_P0, Address);
                 ;    //RF_Write_Add(RX_PW_P0, Address);
                 ;}
                 ;
                 ;
                 ;void Common_Config(){
                 _Common_Config:
                 ; .FSTART _Common_Config
                 ;    CE=0;
00008a 9892      	CBI  0x12,2
                 ;    CSN=1;
00008b 9a97      	SBI  0x12,7
                 ;    SCK=0;
00008c 9893      	CBI  0x12,3
                 ;    delay_us(10);
00008d d074      	RCALL SUBOPT_0x3
                 ;    RF_Write(STATUS,0b01111110);
00008e d077      	RCALL SUBOPT_0x4
                 ;    RF_Command(0b11100010);
00008f eea2      	LDI  R26,LOW(226)
000090 dfd4      	RCALL _RF_Command
                 ;    RF_Write(CONFIG,0b00011111);
000091 e0e0      	LDI  R30,LOW(0)
000092 93ea      	ST   -Y,R30
000093 e1af      	LDI  R26,LOW(31)
000094 dfd4      	RCALL _RF_Write
                 ;    delay_ms(2);
000095 e0a2      	LDI  R26,LOW(2)
000096 e0b0      	LDI  R27,0
000097 d072      	RCALL _delay_ms
                 ;    RF_Write(STATUS,0b01111110);
000098 d06d      	RCALL SUBOPT_0x4
                 ;    RF_Write(FEATURE, 0b00000100);
000099 e1ed      	LDI  R30,LOW(29)
00009a 93ea      	ST   -Y,R30
00009b e0a4      	LDI  R26,LOW(4)
00009c dfcc      	RCALL _RF_Write
                 ;    RF_Write(RF_CH,0b00000010);
00009d e0e5      	LDI  R30,LOW(5)
00009e 93ea      	ST   -Y,R30
00009f e0a2      	LDI  R26,LOW(2)
0000a0 dfc8      	RCALL _RF_Write
                 ;    RF_Write(RF_SETUP, 0b00000110);
0000a1 e0e6      	LDI  R30,LOW(6)
0000a2 93ea      	ST   -Y,R30
0000a3 e0a6      	LDI  R26,LOW(6)
0000a4 dfc4      	RCALL _RF_Write
                 ;    RF_Write(DYNPD,0b00000001);
0000a5 e1ec      	LDI  R30,LOW(28)
0000a6 93ea      	ST   -Y,R30
0000a7 e0a1      	LDI  R26,LOW(1)
0000a8 dfc0      	RCALL _RF_Write
                 ;    RF_Write(EN_RXADDR,0b00000001);
0000a9 e0e2      	LDI  R30,LOW(2)
0000aa 93ea      	ST   -Y,R30
0000ab e0a1      	LDI  R26,LOW(1)
0000ac c00c      	RJMP _0x2000001
                 ;}
                 ; .FEND
                 ;
                 ;void Common_Init(){
                 _Common_Init:
                 ; .FSTART _Common_Init
                 ;    CE=1;
0000ad 9a92      	SBI  0x12,2
                 ;    delay_us(700);
                +
0000ae e788     +LDI R24 , LOW ( 1400 )
0000af e095     +LDI R25 , HIGH ( 1400 )
                +__DELAY_USW_LOOP :
0000b0 9701     +SBIW R24 , 1
0000b1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1400
                 ;    CE=0;
0000b2 9892      	CBI  0x12,2
                 ;    CSN=1;
0000b3 9a97      	SBI  0x12,7
                 ;}
0000b4 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void TX_Mode(){
                 _TX_Mode:
                 ; .FSTART _TX_Mode
                 ;    CE=0;
0000b5 9892      	CBI  0x12,2
                 ;    RF_Write(CONFIG,0b00011110);
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 93ea      	ST   -Y,R30
0000b8 e1ae      	LDI  R26,LOW(30)
                 _0x2000001:
0000b9 dfaf      	RCALL _RF_Write
                 ;}
0000ba 9508      	RET
                 ; .FEND
                 ;
                 ;void RX_Mode(){
                 ;    RF_Write(CONFIG,0b00011111);
                 ;    CE=1;
                 ;}
                 ;
                 ;void TX_Config(){
                 _TX_Config:
                 ; .FSTART _TX_Config
                 ;    RF_Write(STATUS,0b01111110);
0000bb d04a      	RCALL SUBOPT_0x4
                 ;    RF_Command(0b11100010);
0000bc eea2      	LDI  R26,LOW(226)
0000bd dfa7      	RCALL _RF_Command
                 ;    TX_Address(Send_Add);
0000be 2da5      	MOV  R26,R5
0000bf dfbd      	RCALL _TX_Address
                 ;}
0000c0 9508      	RET
                 ; .FEND
                 ;
                 ;void RX_Config(){
                 ;    RF_Write(STATUS,0b01111110);
                 ;    RF_Command(0b11100010);
                 ;    RX_Address(Receive_Add);
                 ;}
                 ;
                 ;void clear(){
                 ;    RF_Write(STATUS,0b01111110);
                 ;    RF_Command(0b11100010);
                 ;}
                 ;
                 ;void TX_Send(){
                 _TX_Send:
                 ; .FSTART _TX_Send
                 ;    TX_Address(Send_Add);
0000c1 2da5      	MOV  R26,R5
0000c2 dfba      	RCALL _TX_Address
                 ;    CSN=1;
0000c3 d039      	RCALL SUBOPT_0x2
                 ;    delay_us(10);
                 ;    CSN=0;
0000c4 9897      	CBI  0x12,7
                 ;    SPI_Write(0b11100001);
0000c5 eea1      	LDI  R26,LOW(225)
0000c6 df7e      	RCALL _SPI_Write
                 ;    CSN=1;
0000c7 d035      	RCALL SUBOPT_0x2
                 ;    delay_us(10);
                 ;    CSN=0;
0000c8 9897      	CBI  0x12,7
                 ;    SPI_Write(0b10100000);
0000c9 eaa0      	LDI  R26,LOW(160)
0000ca df7a      	RCALL _SPI_Write
                 ;    SPI_Write(score);
0000cb 2da8      	MOV  R26,R8
0000cc df78      	RCALL _SPI_Write
                 ;    CSN=1;
0000cd 9a97      	SBI  0x12,7
                 ;    CE=1;
0000ce 9a92      	SBI  0x12,2
                 ;    delay_us(500);
                +
0000cf ee88     +LDI R24 , LOW ( 1000 )
0000d0 e093     +LDI R25 , HIGH ( 1000 )
                +__DELAY_USW_LOOP :
0000d1 9701     +SBIW R24 , 1
0000d2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1000
                 ;    CE=0;
0000d3 9892      	CBI  0x12,2
                 ;    RF_Write(0x07,0b01111110);
0000d4 d031      	RCALL SUBOPT_0x4
                 ;    TX_Address(Send_Add);
0000d5 2da5      	MOV  R26,R5
0000d6 dfa6      	RCALL _TX_Address
                 ;    RF_Command(0b11100001);
0000d7 eea1      	LDI  R26,LOW(225)
0000d8 df8c      	RCALL _RF_Command
                 ;}
0000d9 9508      	RET
                 ; .FEND
                 ;
                 ;void RX_Read(){
                 ;    CE=0;
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_Write(0b01100001);
                 ;    delay_us(10);
                 ;    score = SPI_Read();
                 ;    CSN=1;
                 ;    CE=1;
                 ;    RF_Write(STATUS,0b01111110);
                 ;    RF_Command(0b11100010);
                 ;}
                 ;
                 ;#define reset PIND.1
                 ;#define start PINB.7
                 ;
                 ;
                 ;void main(){
                 ; 0000 0015 void main(){
                 _main:
                 ; .FSTART _main
                 ; 0000 0016     DDRD = 0b11001100;
0000da ecec      	LDI  R30,LOW(204)
0000db bbe1      	OUT  0x11,R30
                 ; 0000 0017     PORTD = 0b11111111;
0000dc efef      	LDI  R30,LOW(255)
0000dd bbe2      	OUT  0x12,R30
                 ; 0000 0018     DDRB=0x00;
0000de e0e0      	LDI  R30,LOW(0)
0000df bbe7      	OUT  0x17,R30
                 ; 0000 0019     PORTB=0xFF;
0000e0 efef      	LDI  R30,LOW(255)
0000e1 bbe8      	OUT  0x18,R30
                 ; 0000 001A 
                 ; 0000 001B     Common_Config();
0000e2 dfa7      	RCALL _Common_Config
                 ; 0000 001C     delay_us(10);
0000e3 d01e      	RCALL SUBOPT_0x3
                 ; 0000 001D     Common_Init();
0000e4 dfc8      	RCALL _Common_Init
                 ; 0000 001E     delay_us(10);
0000e5 d01c      	RCALL SUBOPT_0x3
                 ; 0000 001F     TX_Config();
0000e6 dfd4      	RCALL _TX_Config
                 ; 0000 0020     delay_us(10);
0000e7 d01a      	RCALL SUBOPT_0x3
                 ; 0000 0021     TX_Mode();
0000e8 dfcc      	RCALL _TX_Mode
                 ; 0000 0022 
                 ; 0000 0023     #asm("sei")
0000e9 9478      	sei
                 ; 0000 0024 
                 ; 0000 0025 while (1){
                 _0x53:
                 ; 0000 0026     if(reset == 0){
0000ea 9981      	SBIC 0x10,1
0000eb c004      	RJMP _0x56
                 ; 0000 0027         score = 10;
0000ec e0ea      	LDI  R30,LOW(10)
0000ed e0f0      	LDI  R31,HIGH(10)
0000ee 014f      	MOVW R8,R30
                 ; 0000 0028         TX_Send();
0000ef dfd1      	RCALL _TX_Send
                 ; 0000 0029     }
                 ; 0000 002A     if(start == 0){
                 _0x56:
0000f0 99b7      	SBIC 0x16,7
0000f1 c004      	RJMP _0x57
                 ; 0000 002B         score = 9;
0000f2 e0e9      	LDI  R30,LOW(9)
0000f3 e0f0      	LDI  R31,HIGH(9)
0000f4 014f      	MOVW R8,R30
                 ; 0000 002C         TX_Send();
0000f5 dfcb      	RCALL _TX_Send
                 ; 0000 002D     }
                 ; 0000 002E }
                 _0x57:
0000f6 cff3      	RJMP _0x53
                 ; 0000 002F }
                 _0x58:
0000f7 cfff      	RJMP _0x58
                 ; .FEND
                 ;
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0000f8 93aa      	ST   -Y,R26
0000f9 9897      	CBI  0x12,7
0000fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0000fb 81a8      	LD   R26,Y
0000fc cf48      	RJMP _SPI_Write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x2:
0000fd 9a97      	SBI  0x12,7
                +
0000fe e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000ff 958a     +DEC R24
000100 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000101 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
                +
000102 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000103 958a     +DEC R24
000104 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000105 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
000106 e0e7      	LDI  R30,LOW(7)
000107 93ea      	ST   -Y,R30
000108 e7ae      	LDI  R26,LOW(126)
000109 cf5f      	RJMP _RF_Write
                 
                 
                 	.CSEG
                 _delay_ms:
00010a 9610      	adiw r26,0
00010b f039      	breq __delay_ms1
                 __delay_ms0:
                +
00010c ed80     +LDI R24 , LOW ( 0x7D0 )
00010d e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00010e 9701     +SBIW R24 , 1
00010f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000110 95a8      	wdr
000111 9711      	sbiw r26,1
000112 f7c9      	brne __delay_ms0
                 __delay_ms1:
000113 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   3 r6 :   0 r7 :   1 
r8 :   3 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   5 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  21 r25:   5 r26:  34 r27:   3 r28:   3 r29:   1 r30:  61 r31:   5 
x  :   3 y  :  24 z  :   7 
Registers used: 18 out of 35 (51.4%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   3 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  11 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   2 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 
cpc   :   0 cpi   :   1 cpse  :   0 dec   :   5 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 
inc   :   0 ld    :   2 ldd   :   7 ldi   :  59 lds   :   0 lpm   :   7 
lsl   :   1 lsr   :   0 mov   :   7 movw  :   5 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   1 ori   :   2 out   :  10 
pop   :   0 push  :   0 rcall :  48 ret   :  10 reti  :   0 rjmp  :  33 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   8 sbic  :   3 
sbis  :   0 sbiw  :   7 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  16 std   :   2 
sts   :   0 sub   :   0 subi  :   1 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 31 out of 114 (27.2%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000228    540     12    552    8192   6.7%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
