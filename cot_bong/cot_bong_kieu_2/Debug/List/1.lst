
AVRASM ver. 2.1.30  D:\Embedded\ATmega\thi_robot_new\cot_bong\cot_bong_kieu_2\Debug\List\1.asm Sun Jan 28 12:45:57 2018

D:\Embedded\ATmega\thi_robot_new\cot_bong\cot_bong_kieu_2\Debug\List\1.asm(1086): warning: Register r5 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\cot_bong\cot_bong_kieu_2\Debug\List\1.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\cot_bong\cot_bong_kieu_2\Debug\List\1.asm(1088): warning: Register r7 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\cot_bong\cot_bong_kieu_2\Debug\List\1.asm(1089): warning: Register r8 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\cot_bong\cot_bong_kieu_2\Debug\List\1.asm(1090): warning: Register r9 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\cot_bong\cot_bong_kieu_2\Debug\List\1.asm(1091): warning: Register r10 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\cot_bong\cot_bong_kieu_2\Debug\List\1.asm(1092): warning: Register r11 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\cot_bong\cot_bong_kieu_2\Debug\List\1.asm(1093): warning: Register r12 already defined by the .DEF directive
D:\Embedded\ATmega\thi_robot_new\cot_bong\cot_bong_kieu_2\Debug\List\1.asm(1094): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Send_Add=R5
                 	.DEF _Receive_Add=R4
                 	.DEF _Salt_Add=R7
                 	.DEF _score=R8
                 	.DEF _score_msb=R9
                 	.DEF _dem=R10
                 	.DEF _dem_msb=R11
                 	.DEF _rc=R12
                 	.DEF _rc_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c020      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 c11f      	RJMP _timer2_interrupt
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c0ff      	RJMP _timer0_interrput
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000013 b1b1
000014 ab00      	.DB  0xB1,0xB1,0x0,0xAB
                 
                 _0x3:
D:\Embedded\ATmega\thi_robot_new\cot_bong\cot_bong_kieu_2\Debug\List\1.asm(1128): warning: .cseg .db misalignment - padding zero byte
000015 0096      	.DB  0x96
                 _0x4:
D:\Embedded\ATmega\thi_robot_new\cot_bong\cot_bong_kieu_2\Debug\List\1.asm(1130): warning: .cseg .db misalignment - padding zero byte
000016 0064      	.DB  0x64
                 
                 __GLOBAL_INI_TBL:
000017 0004      	.DW  0x04
000018 0004      	.DW  0x04
000019 0026      	.DW  __REG_VARS*2
                 
00001a 0001      	.DW  0x01
00001b 0160      	.DW  _second
00001c 002a      	.DW  _0x3*2
                 
00001d 0001      	.DW  0x01
00001e 0162      	.DW  _milisecond
00001f 002c      	.DW  _0x4*2
                 
                 _0xFFFFFFFF:
000020 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000021 94f8      	CLI
000022 27ee      	CLR  R30
000023 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000024 e0f1      	LDI  R31,1
000025 bffb      	OUT  GICR,R31
000026 bfeb      	OUT  GICR,R30
000027 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000028 e08d      	LDI  R24,(14-2)+1
000029 e0a2      	LDI  R26,2
00002a 27bb      	CLR  R27
                 __CLEAR_REG:
00002b 93ed      	ST   X+,R30
00002c 958a      	DEC  R24
00002d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00002e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00002f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000030 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000031 93ed      	ST   X+,R30
000032 9701      	SBIW R24,1
000033 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000034 e2ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000035 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000036 9185      	LPM  R24,Z+
000037 9195      	LPM  R25,Z+
000038 9700      	SBIW R24,0
000039 f061      	BREQ __GLOBAL_INI_END
00003a 91a5      	LPM  R26,Z+
00003b 91b5      	LPM  R27,Z+
00003c 9005      	LPM  R0,Z+
00003d 9015      	LPM  R1,Z+
00003e 01bf      	MOVW R22,R30
00003f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000040 9005      	LPM  R0,Z+
000041 920d      	ST   X+,R0
000042 9701      	SBIW R24,1
000043 f7e1      	BRNE __GLOBAL_INI_LOOP
000044 01fb      	MOVW R30,R22
000045 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000046 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000047 bfed      	OUT  SPL,R30
000048 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000049 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004b e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004c c10d      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdbool.h>
                 ;
                 ;#define CE      PORTC.0
                 ;#define SCK     PORTC.2
                 ;#define MISO    PINC.4
                 ;#define CSN     PORTC.1
                 ;#define MOSI    PORTC.3
                 ;#define IRQ     PINC.5
                 ;
                 ;char Send_Add = 0xB1, Receive_Add = 0xB1, Salt_Add = 0xAB;
                 ;int score;
                 ;int dem, rc;
                 ;int second = 150, milisecond = 100;
                 
                 	.DSEG
                 ;#include "rf.c"
                 ;#define CONFIG      	0x00
                 ;#define EN_AA       	0x01
                 ;#define EN_RXADDR   	0x02
                 ;#define SETUP_AW    	0x03
                 ;#define SETUP_RETR  	0x04
                 ;#define RF_CH       	0x05
                 ;#define RF_SETUP    	0x06
                 ;#define STATUS  		0x07
                 ;#define OBSERVE_TX  	0x08
                 ;#define RPD          	0x09
                 ;#define RX_ADDR_P0  	0x0A
                 ;#define RX_ADDR_P1  	0x0B
                 ;#define RX_ADDR_P2  	0x0C
                 ;#define RX_ADDR_P3  	0x0D
                 ;#define RX_ADDR_P4  	0x0E
                 ;#define RX_ADDR_P5  	0x0F
                 ;#define TX_ADDR     	0x10
                 ;#define RX_PW_P0    	0x11
                 ;#define RX_PW_P1    	0x12
                 ;#define RX_PW_P2    	0x13
                 ;#define RX_PW_P3    	0x14
                 ;#define RX_PW_P4    	0x15
                 ;#define RX_PW_P5    	0x16
                 ;#define FIFO_STATUS 	0x17
                 ;#define DYNPD	    	0x1C
                 ;#define FEATURE	    	0x1D
                 ;
                 ;void SPI_Write(unsigned char Buff){
                 ; 0000 0012 void SPI_Write(unsigned char Buff){
                 
                 	.CSEG
                 _SPI_Write:
                 ; .FSTART _SPI_Write
                 ;    unsigned char bit_ctr;
                 ;    for(bit_ctr=0;bit_ctr<8;bit_ctr++){
00004d 93aa      	ST   -Y,R26
00004e 931a      	ST   -Y,R17
                 ;	Buff -> Y+1
                 ;	bit_ctr -> R17
00004f e010      	LDI  R17,LOW(0)
                 _0x6:
000050 3018      	CPI  R17,8
000051 f488      	BRSH _0x7
                 ;        MOSI = (Buff & 0x80);
000052 81e9      	LDD  R30,Y+1
000053 78e0      	ANDI R30,LOW(0x80)
000054 f411      	BRNE _0x8
000055 98ab      	CBI  0x15,3
000056 c001      	RJMP _0x9
                 _0x8:
000057 9aab      	SBI  0x15,3
                 _0x9:
                 ;        delay_us(5);
000058 d14a      	RCALL SUBOPT_0x0
                 ;        Buff = (Buff << 1);
000059 81e9      	LDD  R30,Y+1
00005a 0fee      	LSL  R30
00005b 83e9      	STD  Y+1,R30
                 ;        SCK = 1;
00005c d14a      	RCALL SUBOPT_0x1
                 ;        delay_us(5);
                 ;        Buff |= MISO;
00005d 81a9      	LDD  R26,Y+1
00005e 2bea      	OR   R30,R26
00005f 83e9      	STD  Y+1,R30
                 ;        SCK = 0;
000060 98aa      	CBI  0x15,2
                 ;    }
000061 5f1f      	SUBI R17,-1
000062 cfed      	RJMP _0x6
                 _0x7:
                 ;}
000063 8118      	LDD  R17,Y+0
000064 c026      	RJMP _0x2000006
                 ; .FEND
                 ;
                 ;unsigned char SPI_Read(void){
                 _SPI_Read:
                 ; .FSTART _SPI_Read
                 ;    unsigned char Buff=0;
                 ;    unsigned char bit_ctr;
                 ;    for(bit_ctr=0;bit_ctr<8;bit_ctr++){
000065 d170      	RCALL __SAVELOCR2
                 ;	Buff -> R17
                 ;	bit_ctr -> R16
000066 e010      	LDI  R17,0
000067 e000      	LDI  R16,LOW(0)
                 _0xF:
000068 3008      	CPI  R16,8
000069 f438      	BRSH _0x10
                 ;        delay_us(5);
00006a d138      	RCALL SUBOPT_0x0
                 ;        Buff = (Buff << 1);
00006b 0f11      	LSL  R17
                 ;        SCK = 1;
00006c d13a      	RCALL SUBOPT_0x1
                 ;        delay_us(5);
                 ;        Buff |= MISO;
00006d 2b1e      	OR   R17,R30
                 ;        SCK = 0;
00006e 98aa      	CBI  0x15,2
                 ;    }
00006f 5f0f      	SUBI R16,-1
000070 cff7      	RJMP _0xF
                 _0x10:
                 ;    return(Buff);
000071 2fe1      	MOV  R30,R17
000072 9109      	LD   R16,Y+
000073 9119      	LD   R17,Y+
000074 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;void RF_Command(unsigned char command){
                 _RF_Command:
                 ; .FSTART _RF_Command
                 ;    CSN=0;
000075 d137      	RCALL SUBOPT_0x2
                 ;	command -> Y+0
                 ;    SPI_Write(command);
000076 d139      	RCALL SUBOPT_0x3
                 ;    CSN=1;
000077 d13a      	RCALL SUBOPT_0x4
                 ;    delay_us(10);
                 ;}
000078 c020      	RJMP _0x2000004
                 ; .FEND
                 ;
                 ;
                 ;void RF_Write(unsigned char Reg_Add, unsigned char Value){
                 _RF_Write:
                 ; .FSTART _RF_Write
                 ;    CSN=0;
000079 d133      	RCALL SUBOPT_0x2
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_Write(0b00100000|Reg_Add);
00007a 81e9      	LDD  R30,Y+1
00007b 62e0      	ORI  R30,0x20
00007c 2fae      	MOV  R26,R30
00007d c00a      	RJMP _0x2000005
                 ;    SPI_Write(Value);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;}
                 ; .FEND
                 ;
                 ;void RF_Write_Add(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
                 ;{
                 _RF_Write_Add:
                 ; .FSTART _RF_Write_Add
                 ;    CSN=0;
00007e d12e      	RCALL SUBOPT_0x2
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_Write(0b00100000|Reg_Add);
00007f 81e9      	LDD  R30,Y+1
000080 62e0      	ORI  R30,0x20
000081 2fae      	MOV  R26,R30
000082 dfca      	RCALL _SPI_Write
                 ;    SPI_Write(Salt_Add);
000083 2da7      	MOV  R26,R7
000084 dfc8      	RCALL _SPI_Write
                 ;    SPI_Write(Value);
000085 d12a      	RCALL SUBOPT_0x3
                 ;    SPI_Write(Value);
000086 d129      	RCALL SUBOPT_0x3
                 ;    SPI_Write(Value);
000087 81a8      	LD   R26,Y
                 _0x2000005:
000088 dfc4      	RCALL _SPI_Write
                 ;    SPI_Write(Value);
000089 d126      	RCALL SUBOPT_0x3
                 ;    CSN=1;
00008a d127      	RCALL SUBOPT_0x4
                 ;    delay_us(10);
                 ;}
                 _0x2000006:
00008b 9622      	ADIW R28,2
00008c 9508      	RET
                 ; .FEND
                 ;
                 ;void TX_Address(unsigned char Address){
                 _TX_Address:
                 ; .FSTART _TX_Address
                 ;    CSN=0;
00008d d11f      	RCALL SUBOPT_0x2
                 ;	Address -> Y+0
                 ;    RF_Write(SETUP_AW,0b00000011);
00008e d128      	RCALL SUBOPT_0x5
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
00008f 98a9      	CBI  0x15,1
                 ;    //RF_Write_Add(RX_ADDR_P0, Address);
                 ;    RF_Write_Add(TX_ADDR, Address);
000090 e1e0      	LDI  R30,LOW(16)
000091 c004      	RJMP _0x2000003
                 ;}
                 ; .FEND
                 ;
                 ;void RX_Address(unsigned char Address){
                 _RX_Address:
                 ; .FSTART _RX_Address
                 ;    CSN=0;
000092 d11a      	RCALL SUBOPT_0x2
                 ;	Address -> Y+0
                 ;    RF_Write(SETUP_AW,0b00000011);
000093 d123      	RCALL SUBOPT_0x5
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
000094 98a9      	CBI  0x15,1
                 ;    RF_Write_Add(RX_ADDR_P0, Address);
000095 e0ea      	LDI  R30,LOW(10)
                 _0x2000003:
000096 93ea      	ST   -Y,R30
000097 81a9      	LDD  R26,Y+1
000098 dfe5      	RCALL _RF_Write_Add
                 ;    //RF_Write_Add(RX_PW_P0, Address);
                 ;}
                 _0x2000004:
000099 9621      	ADIW R28,1
00009a 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void Common_Config(){
                 _Common_Config:
                 ; .FSTART _Common_Config
                 ;    CE=0;
00009b 98a8      	CBI  0x15,0
                 ;    CSN=1;
00009c 9aa9      	SBI  0x15,1
                 ;    SCK=0;
00009d 98aa      	CBI  0x15,2
                 ;    delay_us(10);
00009e d11d      	RCALL SUBOPT_0x6
                 ;    RF_Write(STATUS,0b01111110);
00009f d120      	RCALL SUBOPT_0x7
                 ;    RF_Command(0b11100010);
0000a0 eea2      	LDI  R26,LOW(226)
0000a1 dfd3      	RCALL _RF_Command
                 ;    RF_Write(CONFIG,0b00011111);
0000a2 e0e0      	LDI  R30,LOW(0)
0000a3 93ea      	ST   -Y,R30
0000a4 e1af      	LDI  R26,LOW(31)
0000a5 dfd3      	RCALL _RF_Write
                 ;    delay_ms(2);
0000a6 e0a2      	LDI  R26,LOW(2)
0000a7 d11c      	RCALL SUBOPT_0x8
                 ;    RF_Write(STATUS,0b01111110);
0000a8 d117      	RCALL SUBOPT_0x7
                 ;    RF_Write(FEATURE, 0b00000100);
0000a9 e1ed      	LDI  R30,LOW(29)
0000aa 93ea      	ST   -Y,R30
0000ab e0a4      	LDI  R26,LOW(4)
0000ac dfcc      	RCALL _RF_Write
                 ;    RF_Write(RF_CH,0b00000010);
0000ad e0e5      	LDI  R30,LOW(5)
0000ae 93ea      	ST   -Y,R30
0000af e0a2      	LDI  R26,LOW(2)
0000b0 dfc8      	RCALL _RF_Write
                 ;    RF_Write(RF_SETUP, 0b00000110);
0000b1 e0e6      	LDI  R30,LOW(6)
0000b2 93ea      	ST   -Y,R30
0000b3 e0a6      	LDI  R26,LOW(6)
0000b4 dfc4      	RCALL _RF_Write
                 ;    RF_Write(DYNPD,0b00000001);
0000b5 e1ec      	LDI  R30,LOW(28)
0000b6 93ea      	ST   -Y,R30
0000b7 e0a1      	LDI  R26,LOW(1)
0000b8 dfc0      	RCALL _RF_Write
                 ;    RF_Write(EN_RXADDR,0b00000001);
0000b9 e0e2      	LDI  R30,LOW(2)
0000ba 93ea      	ST   -Y,R30
0000bb e0a1      	LDI  R26,LOW(1)
0000bc c00c      	RJMP _0x2000002
                 ;}
                 ; .FEND
                 ;
                 ;void Common_Init(){
                 _Common_Init:
                 ; .FSTART _Common_Init
                 ;    CE=1;
0000bd 9aa8      	SBI  0x15,0
                 ;    delay_us(700);
                +
0000be e788     +LDI R24 , LOW ( 1400 )
0000bf e095     +LDI R25 , HIGH ( 1400 )
                +__DELAY_USW_LOOP :
0000c0 9701     +SBIW R24 , 1
0000c1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1400
                 ;    CE=0;
0000c2 98a8      	CBI  0x15,0
                 ;    CSN=1;
0000c3 9aa9      	SBI  0x15,1
                 ;}
0000c4 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void TX_Mode(){
                 _TX_Mode:
                 ; .FSTART _TX_Mode
                 ;    CE=0;
0000c5 98a8      	CBI  0x15,0
                 ;    RF_Write(CONFIG,0b00011110);
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 93ea      	ST   -Y,R30
0000c8 e1ae      	LDI  R26,LOW(30)
                 _0x2000002:
0000c9 dfaf      	RCALL _RF_Write
                 ;}
0000ca 9508      	RET
                 ; .FEND
                 ;
                 ;void RX_Mode(){
                 _RX_Mode:
                 ; .FSTART _RX_Mode
                 ;    RF_Write(CONFIG,0b00011111);
0000cb e0e0      	LDI  R30,LOW(0)
0000cc 93ea      	ST   -Y,R30
0000cd e1af      	LDI  R26,LOW(31)
0000ce dfaa      	RCALL _RF_Write
                 ;    CE=1;
0000cf 9aa8      	SBI  0x15,0
                 ;}
0000d0 9508      	RET
                 ; .FEND
                 ;
                 ;void TX_Config(){
                 _TX_Config:
                 ; .FSTART _TX_Config
                 ;    RF_Write(STATUS,0b01111110);
0000d1 d0ee      	RCALL SUBOPT_0x7
                 ;    RF_Command(0b11100010);
0000d2 eea2      	LDI  R26,LOW(226)
0000d3 dfa1      	RCALL _RF_Command
                 ;    TX_Address(Send_Add);
0000d4 2da5      	MOV  R26,R5
0000d5 dfb7      	RCALL _TX_Address
                 ;}
0000d6 9508      	RET
                 ; .FEND
                 ;
                 ;void RX_Config(){
                 _RX_Config:
                 ; .FSTART _RX_Config
                 ;    RF_Write(STATUS,0b01111110);
0000d7 d0e8      	RCALL SUBOPT_0x7
                 ;    RF_Command(0b11100010);
0000d8 eea2      	LDI  R26,LOW(226)
0000d9 df9b      	RCALL _RF_Command
                 ;    RX_Address(Receive_Add);
0000da 2da4      	MOV  R26,R4
0000db dfb6      	RCALL _RX_Address
                 ;}
0000dc 9508      	RET
                 ; .FEND
                 ;
                 ;void clear(){
                 ;    RF_Write(STATUS,0b01111110);
                 ;    RF_Command(0b11100010);
                 ;}
                 ;
                 ;void TX_Send(){
                 _TX_Send:
                 ; .FSTART _TX_Send
                 ;    TX_Address(Send_Add);
0000dd 2da5      	MOV  R26,R5
0000de dfae      	RCALL _TX_Address
                 ;    CSN=1;
0000df d0d2      	RCALL SUBOPT_0x4
                 ;    delay_us(10);
                 ;    CSN=0;
0000e0 98a9      	CBI  0x15,1
                 ;    SPI_Write(0b11100001);
0000e1 eea1      	LDI  R26,LOW(225)
0000e2 df6a      	RCALL _SPI_Write
                 ;    CSN=1;
0000e3 d0ce      	RCALL SUBOPT_0x4
                 ;    delay_us(10);
                 ;    CSN=0;
0000e4 98a9      	CBI  0x15,1
                 ;    SPI_Write(0b10100000);
0000e5 eaa0      	LDI  R26,LOW(160)
0000e6 df66      	RCALL _SPI_Write
                 ;    SPI_Write(score);
0000e7 2da8      	MOV  R26,R8
0000e8 df64      	RCALL _SPI_Write
                 ;    CSN=1;
0000e9 9aa9      	SBI  0x15,1
                 ;    CE=1;
0000ea 9aa8      	SBI  0x15,0
                 ;    delay_us(500);
                +
0000eb ee88     +LDI R24 , LOW ( 1000 )
0000ec e093     +LDI R25 , HIGH ( 1000 )
                +__DELAY_USW_LOOP :
0000ed 9701     +SBIW R24 , 1
0000ee f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1000
                 ;    CE=0;
0000ef 98a8      	CBI  0x15,0
                 ;    RF_Write(0x07,0b01111110);
0000f0 d0cf      	RCALL SUBOPT_0x7
                 ;    TX_Address(Send_Add);
0000f1 2da5      	MOV  R26,R5
0000f2 df9a      	RCALL _TX_Address
                 ;    RF_Command(0b11100001);
0000f3 eea1      	LDI  R26,LOW(225)
0000f4 c00d      	RJMP _0x2000001
                 ;}
                 ; .FEND
                 ;
                 ;void RX_Read(){
                 _RX_Read:
                 ; .FSTART _RX_Read
                 ;    CE=0;
0000f5 98a8      	CBI  0x15,0
                 ;    CSN=1;
0000f6 d0bb      	RCALL SUBOPT_0x4
                 ;    delay_us(10);
                 ;    CSN=0;
0000f7 98a9      	CBI  0x15,1
                 ;    SPI_Write(0b01100001);
0000f8 e6a1      	LDI  R26,LOW(97)
0000f9 df53      	RCALL _SPI_Write
                 ;    delay_us(10);
0000fa d0c1      	RCALL SUBOPT_0x6
                 ;    score = SPI_Read();
0000fb df69      	RCALL _SPI_Read
0000fc 2e8e      	MOV  R8,R30
0000fd 2499      	CLR  R9
                 ;    CSN=1;
0000fe 9aa9      	SBI  0x15,1
                 ;    CE=1;
0000ff 9aa8      	SBI  0x15,0
                 ;    RF_Write(STATUS,0b01111110);
000100 d0bf      	RCALL SUBOPT_0x7
                 ;    RF_Command(0b11100010);
000101 eea2      	LDI  R26,LOW(226)
                 _0x2000001:
000102 df72      	RCALL _RF_Command
                 ;}
000103 9508      	RET
                 ; .FEND
                 ;
                 ;#define tiem_can PIND.3
                 ;#define servo PORTD.2
                 ;
                 ;
                 ;void reset(){
                 ; 0000 0018 void reset(){
                 _reset:
                 ; .FSTART _reset
                 ; 0000 0019     WDTCR=0x18;
000104 e1e8      	LDI  R30,LOW(24)
000105 bde1      	OUT  0x21,R30
                 ; 0000 001A     WDTCR=0x08;
000106 e0e8      	LDI  R30,LOW(8)
000107 bde1      	OUT  0x21,R30
                 ; 0000 001B     while(1);
                 _0x55:
000108 cfff      	RJMP _0x55
                 ; 0000 001C }
                 ; .FEND
                 ;
                 ;interrupt [TIM0_OVF] void timer0_interrput(){
                 ; 0000 001E interrupt [10] void timer0_interrput(){
                 _timer0_interrput:
                 ; .FSTART _timer0_interrput
000109 93ea      	ST   -Y,R30
00010a 93fa      	ST   -Y,R31
00010b b7ef      	IN   R30,SREG
00010c 93ea      	ST   -Y,R30
                 ; 0000 001F     TCNT0 = 0x9C;
00010d e9ec      	LDI  R30,LOW(156)
00010e bfe2      	OUT  0x32,R30
                 ; 0000 0020     dem++;
00010f 01f5      	MOVW R30,R10
000110 9631      	ADIW R30,1
000111 015f      	MOVW R10,R30
                 ; 0000 0021     if(dem == 200)
000112 ece8      	LDI  R30,LOW(200)
000113 e0f0      	LDI  R31,HIGH(200)
000114 15ea      	CP   R30,R10
000115 05fb      	CPC  R31,R11
000116 f411      	BRNE _0x58
                 ; 0000 0022         dem = 0;
000117 24aa      	CLR  R10
000118 24bb      	CLR  R11
                 ; 0000 0023     if(dem<rc)
                 _0x58:
                +
000119 14ac     +CP R10 , R12
00011a 04bd     +CPC R11 , R13
                 	__CPWRR 10,11,12,13
00011b f414      	BRGE _0x59
                 ; 0000 0024         servo = 1;
00011c 9a92      	SBI  0x12,2
                 ; 0000 0025     else
00011d c001      	RJMP _0x5C
                 _0x59:
                 ; 0000 0026         servo = 0;
00011e 9892      	CBI  0x12,2
                 ; 0000 0027 }
                 _0x5C:
00011f 91e9      	LD   R30,Y+
000120 bfef      	OUT  SREG,R30
000121 91f9      	LD   R31,Y+
000122 91e9      	LD   R30,Y+
000123 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM2_OVF] void timer2_interrupt(){
                 ; 0000 0029 interrupt [5] void timer2_interrupt(){
                 _timer2_interrupt:
                 ; .FSTART _timer2_interrupt
000124 920a      	ST   -Y,R0
000125 921a      	ST   -Y,R1
000126 92fa      	ST   -Y,R15
000127 936a      	ST   -Y,R22
000128 937a      	ST   -Y,R23
000129 938a      	ST   -Y,R24
00012a 939a      	ST   -Y,R25
00012b 93aa      	ST   -Y,R26
00012c 93ba      	ST   -Y,R27
00012d 93ea      	ST   -Y,R30
00012e 93fa      	ST   -Y,R31
00012f b7ef      	IN   R30,SREG
000130 93ea      	ST   -Y,R30
                 ; 0000 002A     TCNT2 = 0xB2;
000131 ebe2      	LDI  R30,LOW(178)
000132 bde4      	OUT  0x24,R30
                 ; 0000 002B     milisecond--;
000133 e6a2      	LDI  R26,LOW(_milisecond)
000134 e0b1      	LDI  R27,HIGH(_milisecond)
000135 d090      	RCALL SUBOPT_0x9
                 ; 0000 002C 
                 ; 0000 002D     if(milisecond == 0){
000136 91e0 0162 	LDS  R30,_milisecond
000138 91f0 0163 	LDS  R31,_milisecond+1
00013a 9730      	SBIW R30,0
00013b f449      	BRNE _0x5F
                 ; 0000 002E         second--;
00013c e6a0      	LDI  R26,LOW(_second)
00013d e0b1      	LDI  R27,HIGH(_second)
00013e d087      	RCALL SUBOPT_0x9
                 ; 0000 002F         milisecond = 100;
00013f e6e4      	LDI  R30,LOW(100)
000140 e0f0      	LDI  R31,HIGH(100)
000141 93e0 0162 	STS  _milisecond,R30
000143 93f0 0163 	STS  _milisecond+1,R31
                 ; 0000 0030     }
                 ; 0000 0031     if(second == 0){
                 _0x5F:
000145 91e0 0160 	LDS  R30,_second
000147 91f0 0161 	LDS  R31,_second+1
000149 9730      	SBIW R30,0
00014a f409      	BRNE _0x60
                 ; 0000 0032         reset();
00014b dfb8      	RCALL _reset
                 ; 0000 0033     }
                 ; 0000 0034 }
                 _0x60:
00014c 91e9      	LD   R30,Y+
00014d bfef      	OUT  SREG,R30
00014e 91f9      	LD   R31,Y+
00014f 91e9      	LD   R30,Y+
000150 91b9      	LD   R27,Y+
000151 91a9      	LD   R26,Y+
000152 9199      	LD   R25,Y+
000153 9189      	LD   R24,Y+
000154 9179      	LD   R23,Y+
000155 9169      	LD   R22,Y+
000156 90f9      	LD   R15,Y+
000157 9019      	LD   R1,Y+
000158 9009      	LD   R0,Y+
000159 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(){
                 ; 0000 0036 void main(){
                 _main:
                 ; .FSTART _main
                 ; 0000 0037     DDRC = 0b00001110;
00015a e0ee      	LDI  R30,LOW(14)
00015b bbe4      	OUT  0x14,R30
                 ; 0000 0038     PORTC = 0b00111111;
00015c e3ef      	LDI  R30,LOW(63)
00015d bbe5      	OUT  0x15,R30
                 ; 0000 0039 
                 ; 0000 003A     DDRD = 0x04;
00015e e0e4      	LDI  R30,LOW(4)
00015f bbe1      	OUT  0x11,R30
                 ; 0000 003B     PORTD = 0x08;
000160 e0e8      	LDI  R30,LOW(8)
000161 bbe2      	OUT  0x12,R30
                 ; 0000 003C 
                 ; 0000 003D     TCCR0=(0<<CS02) | (1<<CS01) | (0<<CS00);
000162 e0e2      	LDI  R30,LOW(2)
000163 bfe3      	OUT  0x33,R30
                 ; 0000 003E     TCNT0=0x9C;
000164 e9ec      	LDI  R30,LOW(156)
000165 bfe2      	OUT  0x32,R30
                 ; 0000 003F 
                 ; 0000 0040     ASSR=0<<AS2;
000166 e0e0      	LDI  R30,LOW(0)
000167 bde2      	OUT  0x22,R30
                 ; 0000 0041     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
000168 e0e7      	LDI  R30,LOW(7)
000169 bde5      	OUT  0x25,R30
                 ; 0000 0042     TCNT2=0xB2;
00016a ebe2      	LDI  R30,LOW(178)
00016b bde4      	OUT  0x24,R30
                 ; 0000 0043     OCR2=0x00;
00016c e0e0      	LDI  R30,LOW(0)
00016d bde3      	OUT  0x23,R30
                 ; 0000 0044 
                 ; 0000 0045 
                 ; 0000 0046     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
00016e e0e1      	LDI  R30,LOW(1)
00016f bfe9      	OUT  0x39,R30
                 ; 0000 0047 
                 ; 0000 0048     Common_Config();
000170 df2a      	RCALL _Common_Config
                 ; 0000 0049     delay_us(10);
000171 d04a      	RCALL SUBOPT_0x6
                 ; 0000 004A     Common_Init();
000172 df4a      	RCALL _Common_Init
                 ; 0000 004B     delay_us(10);
000173 d048      	RCALL SUBOPT_0x6
                 ; 0000 004C     RX_Config();
000174 df62      	RCALL _RX_Config
                 ; 0000 004D     delay_us(10);
000175 d046      	RCALL SUBOPT_0x6
                 ; 0000 004E     RX_Mode();
000176 df54      	RCALL _RX_Mode
                 ; 0000 004F 
                 ; 0000 0050     #asm("sei")
000177 9478      	sei
                 ; 0000 0051     #asm("wdr")
000178 95a8      	wdr
                 ; 0000 0052 
                 ; 0000 0053     rc = 8;
000179 e0e8      	LDI  R30,LOW(8)
00017a e0f0      	LDI  R31,HIGH(8)
00017b 016f      	MOVW R12,R30
                 ; 0000 0054     delay_ms(100);
00017c e6a4      	LDI  R26,LOW(100)
00017d d046      	RCALL SUBOPT_0x8
                 ; 0000 0055 
                 ; 0000 0056     while(1){
                 _0x61:
                 ; 0000 0057         RX_Config();
00017e df58      	RCALL _RX_Config
                 ; 0000 0058         if(IRQ == 0){
00017f 999d      	SBIC 0x13,5
000180 c020      	RJMP _0x64
                 ; 0000 0059             RX_Read();
000181 df73      	RCALL _RX_Read
                 ; 0000 005A             if(score == 7){
000182 e0e7      	LDI  R30,LOW(7)
000183 e0f0      	LDI  R31,HIGH(7)
000184 15e8      	CP   R30,R8
000185 05f9      	CPC  R31,R9
000186 f4d1      	BRNE _0x65
                 ; 0000 005B                 TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
000187 e4e1      	LDI  R30,LOW(65)
000188 bfe9      	OUT  0x39,R30
                 ; 0000 005C                 Common_Init();
000189 df33      	RCALL _Common_Init
                 ; 0000 005D                 delay_us(10);
00018a d031      	RCALL SUBOPT_0x6
                 ; 0000 005E                 TX_Config();
00018b df45      	RCALL _TX_Config
                 ; 0000 005F                 delay_us(10);
00018c d02f      	RCALL SUBOPT_0x6
                 ; 0000 0060                 TX_Mode();
00018d df37      	RCALL _TX_Mode
                 ; 0000 0061                 score = 8;
00018e e0e8      	LDI  R30,LOW(8)
00018f e0f0      	LDI  R31,HIGH(8)
000190 014f      	MOVW R8,R30
                 ; 0000 0062                 delay_ms(200);
000191 eca8      	LDI  R26,LOW(200)
000192 d031      	RCALL SUBOPT_0x8
                 ; 0000 0063                 while(1){
                 _0x66:
                 ; 0000 0064                     rc = 17;
000193 e1e1      	LDI  R30,LOW(17)
000194 e0f0      	LDI  R31,HIGH(17)
000195 016f      	MOVW R12,R30
                 ; 0000 0065                     if(tiem_can == 1){
000196 9b83      	SBIS 0x10,3
000197 c008      	RJMP _0x69
                 ; 0000 0066                         rc = 8;
000198 e0e8      	LDI  R30,LOW(8)
000199 e0f0      	LDI  R31,HIGH(8)
00019a 016f      	MOVW R12,R30
                 ; 0000 0067                         TX_Send();
00019b df41      	RCALL _TX_Send
                 ; 0000 0068                         delay_ms(200);
00019c eca8      	LDI  R26,LOW(200)
00019d d026      	RCALL SUBOPT_0x8
                 ; 0000 0069                         while(tiem_can == 1);
                 _0x6A:
00019e 9983      	SBIC 0x10,3
00019f cffe      	RJMP _0x6A
                 ; 0000 006A                     }
                 ; 0000 006B                 }
                 _0x69:
0001a0 cff2      	RJMP _0x66
                 ; 0000 006C             }
                 ; 0000 006D         }
                 _0x65:
                 ; 0000 006E     }
                 _0x64:
0001a1 cfdc      	RJMP _0x61
                 ; 0000 006F }
                 _0x6D:
0001a2 cfff      	RJMP _0x6D
                 ; .FEND
                 
                 	.DSEG
                 _second:
000160           	.BYTE 0x2
                 _milisecond:
000162           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
                +
0001a3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001a4 958a     +DEC R24
0001a5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0001a7 9aaa      	SBI  0x15,2
0001a8 dffa      	RCALL SUBOPT_0x0
0001a9 e0e0      	LDI  R30,0
0001aa 999c      	SBIC 0x13,4
0001ab e0e1      	LDI  R30,1
0001ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0001ad 93aa      	ST   -Y,R26
0001ae 98a9      	CBI  0x15,1
0001af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001b0 81a8      	LD   R26,Y
0001b1 ce9b      	RJMP _SPI_Write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x4:
0001b2 9aa9      	SBI  0x15,1
                +
0001b3 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0001b4 958a     +DEC R24
0001b5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0001b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0001b7 e0e3      	LDI  R30,LOW(3)
0001b8 93ea      	ST   -Y,R30
0001b9 e0a3      	LDI  R26,LOW(3)
0001ba debe      	RCALL _RF_Write
0001bb cff6      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x6:
                +
0001bc e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0001bd 958a     +DEC R24
0001be f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0001bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7:
0001c0 e0e7      	LDI  R30,LOW(7)
0001c1 93ea      	ST   -Y,R30
0001c2 e7ae      	LDI  R26,LOW(126)
0001c3 ceb5      	RJMP _RF_Write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0001c4 e0b0      	LDI  R27,0
0001c5 c006      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
0001c6 91ed      	LD   R30,X+
0001c7 91fd      	LD   R31,X+
0001c8 9731      	SBIW R30,1
0001c9 93fe      	ST   -X,R31
0001ca 93ee      	ST   -X,R30
0001cb 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001cc 9610      	adiw r26,0
0001cd f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001ce ed80     +LDI R24 , LOW ( 0x7D0 )
0001cf e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001d0 9701     +SBIW R24 , 1
0001d1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001d2 95a8      	wdr
0001d3 9711      	sbiw r26,1
0001d4 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001d5 9508      	ret
                 
                 __SAVELOCR2:
0001d6 931a      	ST   -Y,R17
0001d7 930a      	ST   -Y,R16
0001d8 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :   1 r5 :   3 r6 :   0 r7 :   1 
r8 :   4 r9 :   2 r10:   5 r11:   3 r12:   4 r13:   1 r14:   0 r15:   2 
r16:   5 r17:  11 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  21 r25:   7 r26:  46 r27:   7 r28:   3 r29:   1 r30: 123 r31:  21 
x  :   7 y  :  59 z  :   7 
Registers used: 27 out of 35 (77.1%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   4 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  15 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  16 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   5 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   3 
cpc   :   3 cpi   :   2 cpse  :   0 dec   :   4 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 
inc   :   0 ld    :  21 ldd   :   7 ldi   :  95 lds   :   4 lpm   :   7 
lsl   :   2 lsr   :   0 mov   :  10 movw  :   9 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   2 ori   :   2 out   :  24 
pop   :   0 push  :   0 rcall :  77 ret   :  17 reti  :   2 rjmp  :  42 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :  12 sbic  :   3 
sbis  :   1 sbiw  :  10 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  36 std   :   2 
sts   :   2 sub   :   0 subi  :   2 swap  :   0 tst   :   0 wdr   :   2 

Instructions used: 39 out of 114 (34.2%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003b2    918     28    946    8192  11.5%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
